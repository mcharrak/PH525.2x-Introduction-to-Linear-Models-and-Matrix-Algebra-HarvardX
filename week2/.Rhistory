nrow(nullHypothesis)
?matrix
# set ground truth vector indicating which features have nullhypothesis true
m0 <- 500
m1 <- m - m0
# set ground truth vector indicating which features have nullhypothesis true
m1 <- 500
m0 <- m - m1
nullHypothesis <- matrix(x = c( rep(FALSE, m1), rep(TRUE, m0)))
nullHypothesis <- matrix(x = c( rep(FALSE, m1), rep(TRUE, m0)), ncol = 1)
test <- c( rep(FALSE, m1), rep(TRUE, m0))
test
rm(test)
matrix(test)
matrix(test, ncol = 1)
sum(nullHypothesis & calls)
sum(nullHypothesis & res_bonf)
nullHypothesis
dim(nullHypothesis))
dim(nullHypothesis)
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0) )
sum(nullHypothesis & res_bonf)
res_bonf
dim(res_bonf)
test <- c( rep(FALSE, m1))
length(test)
test <- c( rep(FALSE, m1), rep(TRUE, m0))
length(test)
test_mat <- matrix(test)
dim(test_mat)
# set ground truth vector indicating which features have nullhypothesis true
m1 <- 500
m0 <- m - m1
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0))
nullHypothesis <- matrix(nullHypothesis)
nullHypothesis & calls
nullHypothesis & res_bonf
sum(nullHypothesis))
sum(nullHypothesis)
# set ground truth vector indicating which features have nullhypothesis true
m1 <- 500
m0 <- m - m1
true_calls <- c( rep(FALSE, m1), rep(TRUE, m0))
true_calls <- matrix(nullHypothesis)
true_calls <- c( rep(TRUE, m1), rep(FALSE, m0))
true_calls <- matrix(nullHypothesis)
# set ground truth vector indicating which features have nullhypothesis true
m1 <- 500
m0 <- m - m1
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0))
nullHypothesis <- matrix(nullHypothesis)
start <- 0*m+1
end <- 1*m
calls_bonf <- res_ex7[start : end, ]
start <- end+1
end <- 2*m
calls_padjusted <- res_ex7[start : end, ]
start <- end+1
end <- 3*m
calls_qvals <- res_ex7[start : end, ]
# set ground truth vector indicating which features have nullhypothesis true
m1 <- 500
m0 <- m - m1
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0))
nullHypothesis <- matrix(nullHypothesis)
rm(res_bonf, res_padjusted, res_padjusted)
?&&
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0))
nullHypothesis <- matrix(nullHypothesis)
calls_bonf && nullHypothesis
calls_bonf & nullHypothesis
as.logical(calls_bonf & nullHypothesis)
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0))
as.logical(calls_bonf & nullHypothesis)
calls_bonf & nullHypothesis)
calls_bonf & nullHypothesis
out <- calls_bonf & nullHypothesis
dim(out)
colSums(out)
which(colSums(out) == 2)
sum( calls_bonf[,316] & nullHypothesis)
# set ground truth vector indicating which features have nullhypothesis true
m1 <- 500
m0 <- m - m1
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0))
nullHypothesis <- matrix(nullHypothesis)
# now the null hypothesis is only true for 8793-500 genes. So we have m0=8293 and m1=500 such that m=m0+m1
set.seed(1)
# bonf correction to achieve FWER of 0.05
alpha <- 0.05
bonf_alpha <- alpha/m
res_ex7 <- replicate(B, {
# 1) create data
mat <- matrix(rnorm(n*m), nrow = m, ncol = n)
# now for 500 features, set a difference of 2 between group 1 (1-12) and group 2 (13-24)
delta <- 2
positives <- 500
mat[1:positives, 1:(n/2)] <- mat[1:positives, 1:(n/2)] + delta
# 2) calculate p-values
# markers: first 12 elements in each row are group1 (controls) and next 12 elements in each row are group2 (treatments)
g <- factor( c(rep(0,(n/2)), rep(1,(n/2))))
pvals <- rowttests(mat, g)$p.value
#1
calls_bonf <-  (pvals <= bonf_alpha)
#2
adjusted_pvals <- p.adjust(pvals, method = "fdr")
calls_padjust <- (adjusted_pvals <= alpha)
#3
qvalue_output <- qvalue(pvals)
qvals <- qvalue_output$qvalues
calls_qvals <- (qvals <= alpha)
# return 3 tuple
return(c(calls_bonf, calls_padjust, calls_qvals))
})
# bonferonni
start <- 0*m+1
end <- 1*m11
calls_bonf <- res_ex7[start : end, ]
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
mean_bonf_Vs <- mean(bonf_Vs)
bonf_FPR <- mean_bonf_Vs/B
print(bonf_FPR)
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
mean_bonf_Vs <- mean(bonf_Vs)
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
calls_bonf <- res_ex7[start : end, ]
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0))
# bonferonni
start <- 0*m+1
end <- 1*m11
calls_bonf <- res_ex7[start : end, ]
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
mean_bonf_Vs <- mean(bonf_Vs)
bonf_FPR <- mean_bonf_Vs/B
print(bonf_FPR)
# bonferonni
start <- 0*m+1
end <- 1*m11
calls_bonf <- res_ex7[start : end, ]
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
bonf_Vs_div_m0 <- bonf_Vs/m0
bonf_FPR <- mean(bonf_Vs_div_m0)
print(bonf_FPR)
bonf_Vs_div_m0
mean(bonf_Vs)/m0
# now the null hypothesis is only true for 8793-500 genes. So we have m0=8293 and m1=500 such that m=m0+m1
set.seed(1)
# bonf correction to achieve FWER of 0.05
alpha <- 0.05
bonf_alpha <- alpha/m
B <- 1000
res_ex7 <- replicate(B, {
# 1) create data
mat <- matrix(rnorm(n*m), nrow = m, ncol = n)
# now for 500 features, set a difference of 2 between group 1 (1-12) and group 2 (13-24)
delta <- 2
positives <- 500
mat[1:positives, 1:(n/2)] <- mat[1:positives, 1:(n/2)] + delta
# 2) calculate p-values
# markers: first 12 elements in each row are group1 (controls) and next 12 elements in each row are group2 (treatments)
g <- factor( c(rep(0,(n/2)), rep(1,(n/2))))
pvals <- rowttests(mat, g)$p.value
#1
calls_bonf <-  (pvals <= bonf_alpha)
#2
adjusted_pvals <- p.adjust(pvals, method = "fdr")
calls_padjust <- (adjusted_pvals <= alpha)
#3
qvalue_output <- qvalue(pvals)
qvals <- qvalue_output$qvalues
calls_qvals <- (qvals <= alpha)
# return 3 tuple
return(c(calls_bonf, calls_padjust, calls_qvals))
})
# bonferonni
start <- 0*m+1
end <- 1*m11
calls_bonf <- res_ex7[start : end, ]
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
bonf_Vs_div_m0 <- bonf_Vs/m0
bonf_FPR <- mean(bonf_Vs_div_m0)
print(bonf_FPR)
5.305679e-06
print(bonf_FPR)
5.6e-03
pvals[(-(1:positives))]
pvals
length(pvals)
pvals[(-(1:positives))]
length(pvals[(-(1:positives))])
# bonferonni
start <- 0*m+1
end <- 1*m11
calls_bonf <- res_ex7[start : start+m0, ]
bonf_Vs <- colSums(calls_bonf & nullHypothesis[1:500]) # Vs == false positives
bonf_Vs_div_m0 <- bonf_Vs/m0
bonf_FPR <- mean(bonf_Vs_div_m0)
print(bonf_FPR)
# bonferonni
start <- 0*m+1+m0
end <- 1*m
calls_bonf <- res_ex7[start : end, ]
bonf_Vs <- colSums(calls_bonf & nullHypothesis[-(1:positives)]) # Vs == false positives
nullHypothesis[-(1:positives)])
nullHypothesis
nullHypothesis[1:10]
nullHypothesis[-(1:10)]
nullHypothesis[-(1:positives)]
bonf_Vs <- colSums(calls_bonf & nullHypothesis[-(1:positives)]) # Vs == false positives
bonf_Vs <- colSums(calls_bonf[-(1:positives),] & nullHypothesis[-(1:positives)]) # Vs == false positives
bonf_Vs_div_m0 <- bonf_Vs/m0
bonf_FPR <- mean(bonf_Vs_div_m0)
print(bonf_FPR)
bonf_Vs
bonf_alpha
m
# bonferonni
start <- 0*m+1+m1
end <- 1*m
calls_bonf <- res_ex7[start : end, ]
bonf_Vs <- colSums(calls_bonf[-(1:positives),] & nullHypothesis[-(1:positives)]) # Vs == false positives
calls_bonf
dim(calls_bonf)
bonf_Vs <- colSums(calls_bonf & nullHypothesis[-(1:positives)]) # Vs == false positives
bonf_Vs_div_m0 <- bonf_Vs/m0
bonf_FPR <- mean(bonf_Vs_div_m0)
print(bonf_FPR)
1/8293
start <- 0*m+1
end <- positives
calls_bonf <- res_ex7[start : end, ]
dim(calls_bonf)
# bonferonni => WE ONLY CONSIDER GENES WHERE H0 IS TRUE
# => (we can see this from our denominator being m0 (#count of genes where H0 (nullHypothesis is true)))
start <- 0*m+1+m1
end <- 1*m
calls_bonf <- res_ex7[start : end, ]
bonf_FPs <- colSums(calls_bonf & nullHypothesis[-(1:positives)]) # FPs is here Vs which represents false positives
bonf_FPs_div_m0 <- bonf_FPs/m0
bonf_FPR <- mean(bonf_FPs_div_m0)
print(bonf_FPR)
nullHypothesis[(1:positives)]
nullHypothesis[(1:positives+1)]
nullHypothesis[(1:positives)]
m1
start <- 0*m+1
end <- positives
calls_bonf <- res_ex7[start : end, ]
# false positivies are the cases where H0=FALSE & calls=FALSE
bonf_FNs <- colSums(calls_bonf & nullHypothesis[(1:positives)])
bonf_FNs_div_m0 <- bonf_FNs/m1
bonf_FNR <- mean(bonf_FNs_div_m1)
print(bonf_FNR)
# bonferonni => WE ONLY CONSIDER GENES WHERE H0 IS TRUE
# => (we can see this from our denominator being m0 (#count of genes where H0 (nullHypothesis is true)))
start <- 0*m+1+m1
end <- 1*m
calls_bonf <- res_ex7[start : end, ]
# false positives are the cases where H0=TRUE & calls=TRUE
bonf_FPs <- colSums(calls_bonf & nullHypothesis[-(1:positives)]) # FPs is here Vs which represents false positives
bonf_FPs_div_m0 <- bonf_FPs/m0
bonf_FPR <- mean(bonf_FPs_div_m0)
print(bonf_FPR)
start <- 0*m+1
end <- positives
calls_bonf <- res_ex7[start : end, ]
# false positivies are the cases where H0=FALSE & calls=FALSE
bonf_FNs <- colSums(calls_bonf & nullHypothesis[(1:positives)])
bonf_FNs_div_m1 <- bonf_FNs/m1
bonf_FNR <- mean(bonf_FNs_div_m1)
print(bonf_FNR)
calls_bonf
dim(calls_bonf)
bonf_FNs
start <- 0*m+1
end <- positives
calls_bonf <- res_ex7[start : end, ]
# false positivies are the cases where pval>0.05, therefore, the negation to calls_bonf which checked for pval <= 0.05
bonf_FNs <- colSums(!calls_bonf)
bonf_FNs
bonf_FNs_div_m1 <- bonf_FNs/m1
bonf_FNR <- mean(bonf_FNs_div_m1)
print(bonf_FNR)
start <- 1*m+1+m1
end <- 2*m
calls_padjusted <- res_ex7[start : end, ]
# false positives are the cases where H0=TRUE & calls=TRUE
padjusted_FPs <- colSums(calls_padjusted & nullHypothesis[-(1:positives)]) # FPs is here Vs, which represents false positives
padjusted_FPs_div_m0 <- padjusted_FPs/m0
padjusted_FPR <- mean(padjusted_FPs_div_m0)
print(padjusted_FPR)
start <- 0*m+1
end <- start+positives-1
calls_bonf <- res_ex7[start : end, ]
# false positivies are the cases where pval>0.05, therefore, the negation to calls_bonf which checked for pval <= 0.05
bonf_FNs <- colSums(!calls_bonf)
bonf_FNs_div_m1 <- bonf_FNs/m1
bonf_FNR <- mean(bonf_FNs_div_m1)
print(bonf_FNR)
start <- 1*m+1
end <- start+positives-1
start <- 1*m+1
end <- start+positives-1
calls_padjusted <- res_ex7[start : end, ]
# false positivies are the cases where pval>0.05, therefore, the negation to calls_padjusted which checked for pval <= 0.05
padjusted_FNs <- colSums(!calls_padjusted)
padjusted_FNs_div_m1 <- padjusted_FNs/m1
padjusted_FNR <- mean(padjusted_FNs_div_m1)
print(padjusted_FNR)
start <- 2*m+1+m1
end <- 3*m
calls_qvals <- res_ex7[start : end, ]
# false positives are the cases where H0=TRUE & calls=TRUE
qvals_FPs <- colSums(calls_qvals & nullHypothesis[-(1:positives)]) # FPs is here Vs, which represents false positives
qvals_FPs_div_m0 <- qvals_FPs/m0
qvals_FPR <- mean(qvals_FPs_div_m0)
print(qvals_FPR)
start <- 2*m+1
end <- start+positives-1
calls_qvals <- res_ex7[start : end, ]
# false positivies are the cases where pval>0.05, therefore, the negation to calls_qvals which checked for pval <= 0.05
qvals_FNs <- colSums(!calls_qvals)
qvals_FNs_div_m1 <- qvals_FNs/m1
qvals_FNR <- mean(qvals_FNs_div_m1)
print(qvals_FNR)
a <- c(0,0,1,1,0,0,0,1,0,1,0,0,0,1,1,1,0,0)
a
length(a)
mean(a)
median(a)
sd(a)
setwd("~/Desktop/ML_classes/Linear_Models_and_Matrix_Algebra_harvard/week2")
library(UsingR)
x = father.son$height
y = father.son$height
n = length(y)
# Now let's run a Monte Carlo simulation in which we take a sample of size 50 over and over again
N = 50
index = sample(n,N)
n
library(UsingR)
x = father.son$fheight
y = father.son$sheight
n = length(y)
# Now let's run a Monte Carlo simulation in which we take a sample of size 50 over and over again
N = 50
index = sample(n,N)
n
N
index
?sample
index = sample(x = 1:n, size = N)
sampledat = father.son[index, ]
x = sampledat$fheight
y = sampledat$sheight
x = sampledat$fheight
y = sampledat$sheight
betahat = lm(y~x)$coef
betahat
30.31 * 2.54
mean(y)
mean(x)
# Use the function replicate() to take 10,000 samples.
B = 10000
# Use the function replicate() to take 10,000 samples.
B = 10000
betahat_mat <- replicate(B, {
index <- sample(x = 1:n, size = N)
sampledat = father.son[index, ]
x = sampledat$fheight
y = sampledat$sheight
betahat = lm(y~x)$coef
return(betahat)
})
slope_estimates <- betahat_mat[,2]
# Use the function replicate() to take 10,000 samples.
B = 10000
set.seed(1)
betahat_mat <- replicate(B, {
index <- sample(x = 1:n, size = N)
sampledat = father.son[index, ]
x = sampledat$fheight
y = sampledat$sheight
betahat = lm(y~x)$coef
return(betahat)
})
slope_estimates <- betahat_mat[,2]
SE_slope_estimates <- sd(slope_estimates)
print(SE_slope_estimates)
g = 9.8 ## meters per second^2 (earth graviation)
h0 = 56.67 ## height at tt=0
v0 = 0 ## speed at tt=0
n = 25 ## number of observations
tt = seq(0,3.4,len=n) ## time in secs, t is a base function (i.e. transpose)
y = h0 + v0 *tt  - 0.5* g*tt^2 + rnorm(n,sd=1) #the estimate for the covariate tt^2 will be beta2 == g*0.5, thus estimate of g == 2*beta2
# To obtain the LSE in R we could write:
X <- cbind(1,tt,tt^2)
A <- solve(crossprod(X)) %*% t(X) #this corresponds to betahat without y because: betahat = (X'X)^-1 * X'*y
betahat  <- A %*% y
LSE_g <- 2*betahat[3]
cat(LSE_g)
set.seed(1)
B <- 100000 # number of MC simulated datasets
LSE_gs <- replicate(n = B, expr = {
y = h0 + v0 *tt  - 0.5* g*tt^2 + rnorm(n,sd=1)
A <- solve(crossprod(X)) %*% t(X) #this corresponds to betahat without y because: betahat = (X'X)^-1 * X'*y
betahat  <- A %*% y
LSE_g <- 2*betahat[3]
})
SD_LSE_g <- sd(LSE_gs)
cat(SD_LSE_g)
library(UsingR)
x = father.son$fheight
y = father.son$sheight
n = length(y)
# Now let's run a Monte Carlo simulation in which we take a sample of size 50 over and over again
N = 50
index = sample(x = 1:n, size = N)
sampledat = father.son[index, ]
x = sampledat$fheight
y = sampledat$sheight
betahat = lm(y~x)$coef
# Use the function replicate() to take 10,000 samples.
B = 10000
set.seed(1)
betahat_mat <- replicate(B, {
index <- sample(x = 1:n, size = N)
sampledat = father.son[index, ]
x = sampledat$fheight
y = sampledat$sheight
betahat = lm(y~x)$coef
return(betahat)
})
slope_estimates <- betahat_mat[,2]
SE_slope_estimates <- sd(slope_estimates)
print(SE_slope_estimates)
betahat_mat
head(betahat_mat)
View(betahat_mat)
View(betahat_mat)
betahat_mat <- t(betahat_mat)
slope_estimates <- betahat_mat[,2]
SE_slope_estimates <- sd(slope_estimates)
print(SE_slope_estimates)
mu_x <- mean(father.son$fheight)
mu_y <- mean(father.son$sheight)
x <- father.son$fheight
y <- father.son$sheight
# compute covariacne between father heights (x) and son heights (y)
mu_x <- mean(x)
mu_y <- mean(y)
dim(x)
crossprod(x,y)
x <- father.son$fheight
y <- father.son$sheight
# compute covariacne between father heights (x) and son heights (y)
mu_x <- mean(x)
mu_y <- mean(y)
# numerator
crossprod(x = (x -mu_x), y = (y - mu_y))
x <- father.son$fheight
y <- father.son$sheight
# compute covariacne between father heights (x) and son heights (y)
mu_x <- mean(x)
mu_y <- mean(y)
# numerator
num <- crossprod(x = (x -mu_x), y = (y - mu_y))
# denominator
denom <- length(x)
cov <- num/denom
print(cov)
x <- father.son$fheight
y <- father.son$sheight
x <- father.son$fheight
y <- father.son$sheight
# compute covariacne between father heights (x) and son heights (y)
mu_x <- mean(x)
mu_y <- mean(y)
# numerator
num <- crossprod(x = (y - mu_y), y = (x - mu_x))
# denominator
denom <- length(x)
cov <- num/denom
print(cov)
mean( (y - mean(y))*(x-mean(x) ) )
print(cov[1,1])
x =  father.son$fheight
beta =  c(34,0.5)
var(beta[1]+beta[2]*x)
# another example with the free fall object formula (e.g. falling from pisa tower)
y = h0 + v0*tt  - 0.5*g*tt^2 + rnorm(n,sd=1)
# another example with the free fall object formula (e.g. falling from pisa tower)
y = h0 + v0*tt  - 0.5*g*tt^2 + rnorm(n,sd=1)
h0
v0 * tt
v0
tt
rnorm(n,sd=1)
n
length(tt)
# another example with the free fall object formula (e.g. falling from pisa tower)
n = length(tt)
y = h0 + v0*tt  - 0.5*g*tt^2 + rnorm(n, sd=1)
var(y)
n
y = h0 + v0*tt  - 0.5*g*tt^2 + rnorm(n, sd=1) #should have a variance of 1 because the eps term has SD=1
var(y)
var(h0)
var(v0*tt)
var(h0 + v0*tt)
