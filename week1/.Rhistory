nullHypothesis
dim(nullHypothesis))
dim(nullHypothesis)
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0) )
sum(nullHypothesis & res_bonf)
res_bonf
dim(res_bonf)
test <- c( rep(FALSE, m1))
length(test)
test <- c( rep(FALSE, m1), rep(TRUE, m0))
length(test)
test_mat <- matrix(test)
dim(test_mat)
# set ground truth vector indicating which features have nullhypothesis true
m1 <- 500
m0 <- m - m1
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0))
nullHypothesis <- matrix(nullHypothesis)
nullHypothesis & calls
nullHypothesis & res_bonf
sum(nullHypothesis))
sum(nullHypothesis)
# set ground truth vector indicating which features have nullhypothesis true
m1 <- 500
m0 <- m - m1
true_calls <- c( rep(FALSE, m1), rep(TRUE, m0))
true_calls <- matrix(nullHypothesis)
true_calls <- c( rep(TRUE, m1), rep(FALSE, m0))
true_calls <- matrix(nullHypothesis)
# set ground truth vector indicating which features have nullhypothesis true
m1 <- 500
m0 <- m - m1
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0))
nullHypothesis <- matrix(nullHypothesis)
start <- 0*m+1
end <- 1*m
calls_bonf <- res_ex7[start : end, ]
start <- end+1
end <- 2*m
calls_padjusted <- res_ex7[start : end, ]
start <- end+1
end <- 3*m
calls_qvals <- res_ex7[start : end, ]
# set ground truth vector indicating which features have nullhypothesis true
m1 <- 500
m0 <- m - m1
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0))
nullHypothesis <- matrix(nullHypothesis)
rm(res_bonf, res_padjusted, res_padjusted)
?&&
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0))
nullHypothesis <- matrix(nullHypothesis)
calls_bonf && nullHypothesis
calls_bonf & nullHypothesis
as.logical(calls_bonf & nullHypothesis)
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0))
as.logical(calls_bonf & nullHypothesis)
calls_bonf & nullHypothesis)
calls_bonf & nullHypothesis
out <- calls_bonf & nullHypothesis
dim(out)
colSums(out)
which(colSums(out) == 2)
sum( calls_bonf[,316] & nullHypothesis)
# set ground truth vector indicating which features have nullhypothesis true
m1 <- 500
m0 <- m - m1
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0))
nullHypothesis <- matrix(nullHypothesis)
# now the null hypothesis is only true for 8793-500 genes. So we have m0=8293 and m1=500 such that m=m0+m1
set.seed(1)
# bonf correction to achieve FWER of 0.05
alpha <- 0.05
bonf_alpha <- alpha/m
res_ex7 <- replicate(B, {
# 1) create data
mat <- matrix(rnorm(n*m), nrow = m, ncol = n)
# now for 500 features, set a difference of 2 between group 1 (1-12) and group 2 (13-24)
delta <- 2
positives <- 500
mat[1:positives, 1:(n/2)] <- mat[1:positives, 1:(n/2)] + delta
# 2) calculate p-values
# markers: first 12 elements in each row are group1 (controls) and next 12 elements in each row are group2 (treatments)
g <- factor( c(rep(0,(n/2)), rep(1,(n/2))))
pvals <- rowttests(mat, g)$p.value
#1
calls_bonf <-  (pvals <= bonf_alpha)
#2
adjusted_pvals <- p.adjust(pvals, method = "fdr")
calls_padjust <- (adjusted_pvals <= alpha)
#3
qvalue_output <- qvalue(pvals)
qvals <- qvalue_output$qvalues
calls_qvals <- (qvals <= alpha)
# return 3 tuple
return(c(calls_bonf, calls_padjust, calls_qvals))
})
# bonferonni
start <- 0*m+1
end <- 1*m11
calls_bonf <- res_ex7[start : end, ]
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
mean_bonf_Vs <- mean(bonf_Vs)
bonf_FPR <- mean_bonf_Vs/B
print(bonf_FPR)
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
mean_bonf_Vs <- mean(bonf_Vs)
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
calls_bonf <- res_ex7[start : end, ]
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
nullHypothesis <- c( rep(FALSE, m1), rep(TRUE, m0))
# bonferonni
start <- 0*m+1
end <- 1*m11
calls_bonf <- res_ex7[start : end, ]
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
mean_bonf_Vs <- mean(bonf_Vs)
bonf_FPR <- mean_bonf_Vs/B
print(bonf_FPR)
# bonferonni
start <- 0*m+1
end <- 1*m11
calls_bonf <- res_ex7[start : end, ]
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
bonf_Vs_div_m0 <- bonf_Vs/m0
bonf_FPR <- mean(bonf_Vs_div_m0)
print(bonf_FPR)
bonf_Vs_div_m0
mean(bonf_Vs)/m0
# now the null hypothesis is only true for 8793-500 genes. So we have m0=8293 and m1=500 such that m=m0+m1
set.seed(1)
# bonf correction to achieve FWER of 0.05
alpha <- 0.05
bonf_alpha <- alpha/m
B <- 1000
res_ex7 <- replicate(B, {
# 1) create data
mat <- matrix(rnorm(n*m), nrow = m, ncol = n)
# now for 500 features, set a difference of 2 between group 1 (1-12) and group 2 (13-24)
delta <- 2
positives <- 500
mat[1:positives, 1:(n/2)] <- mat[1:positives, 1:(n/2)] + delta
# 2) calculate p-values
# markers: first 12 elements in each row are group1 (controls) and next 12 elements in each row are group2 (treatments)
g <- factor( c(rep(0,(n/2)), rep(1,(n/2))))
pvals <- rowttests(mat, g)$p.value
#1
calls_bonf <-  (pvals <= bonf_alpha)
#2
adjusted_pvals <- p.adjust(pvals, method = "fdr")
calls_padjust <- (adjusted_pvals <= alpha)
#3
qvalue_output <- qvalue(pvals)
qvals <- qvalue_output$qvalues
calls_qvals <- (qvals <= alpha)
# return 3 tuple
return(c(calls_bonf, calls_padjust, calls_qvals))
})
# bonferonni
start <- 0*m+1
end <- 1*m11
calls_bonf <- res_ex7[start : end, ]
bonf_Vs <- colSums(calls_bonf & nullHypothesis) # Vs == false positives
bonf_Vs_div_m0 <- bonf_Vs/m0
bonf_FPR <- mean(bonf_Vs_div_m0)
print(bonf_FPR)
5.305679e-06
print(bonf_FPR)
5.6e-03
pvals[(-(1:positives))]
pvals
length(pvals)
pvals[(-(1:positives))]
length(pvals[(-(1:positives))])
# bonferonni
start <- 0*m+1
end <- 1*m11
calls_bonf <- res_ex7[start : start+m0, ]
bonf_Vs <- colSums(calls_bonf & nullHypothesis[1:500]) # Vs == false positives
bonf_Vs_div_m0 <- bonf_Vs/m0
bonf_FPR <- mean(bonf_Vs_div_m0)
print(bonf_FPR)
# bonferonni
start <- 0*m+1+m0
end <- 1*m
calls_bonf <- res_ex7[start : end, ]
bonf_Vs <- colSums(calls_bonf & nullHypothesis[-(1:positives)]) # Vs == false positives
nullHypothesis[-(1:positives)])
nullHypothesis
nullHypothesis[1:10]
nullHypothesis[-(1:10)]
nullHypothesis[-(1:positives)]
bonf_Vs <- colSums(calls_bonf & nullHypothesis[-(1:positives)]) # Vs == false positives
bonf_Vs <- colSums(calls_bonf[-(1:positives),] & nullHypothesis[-(1:positives)]) # Vs == false positives
bonf_Vs_div_m0 <- bonf_Vs/m0
bonf_FPR <- mean(bonf_Vs_div_m0)
print(bonf_FPR)
bonf_Vs
bonf_alpha
m
# bonferonni
start <- 0*m+1+m1
end <- 1*m
calls_bonf <- res_ex7[start : end, ]
bonf_Vs <- colSums(calls_bonf[-(1:positives),] & nullHypothesis[-(1:positives)]) # Vs == false positives
calls_bonf
dim(calls_bonf)
bonf_Vs <- colSums(calls_bonf & nullHypothesis[-(1:positives)]) # Vs == false positives
bonf_Vs_div_m0 <- bonf_Vs/m0
bonf_FPR <- mean(bonf_Vs_div_m0)
print(bonf_FPR)
1/8293
start <- 0*m+1
end <- positives
calls_bonf <- res_ex7[start : end, ]
dim(calls_bonf)
# bonferonni => WE ONLY CONSIDER GENES WHERE H0 IS TRUE
# => (we can see this from our denominator being m0 (#count of genes where H0 (nullHypothesis is true)))
start <- 0*m+1+m1
end <- 1*m
calls_bonf <- res_ex7[start : end, ]
bonf_FPs <- colSums(calls_bonf & nullHypothesis[-(1:positives)]) # FPs is here Vs which represents false positives
bonf_FPs_div_m0 <- bonf_FPs/m0
bonf_FPR <- mean(bonf_FPs_div_m0)
print(bonf_FPR)
nullHypothesis[(1:positives)]
nullHypothesis[(1:positives+1)]
nullHypothesis[(1:positives)]
m1
start <- 0*m+1
end <- positives
calls_bonf <- res_ex7[start : end, ]
# false positivies are the cases where H0=FALSE & calls=FALSE
bonf_FNs <- colSums(calls_bonf & nullHypothesis[(1:positives)])
bonf_FNs_div_m0 <- bonf_FNs/m1
bonf_FNR <- mean(bonf_FNs_div_m1)
print(bonf_FNR)
# bonferonni => WE ONLY CONSIDER GENES WHERE H0 IS TRUE
# => (we can see this from our denominator being m0 (#count of genes where H0 (nullHypothesis is true)))
start <- 0*m+1+m1
end <- 1*m
calls_bonf <- res_ex7[start : end, ]
# false positives are the cases where H0=TRUE & calls=TRUE
bonf_FPs <- colSums(calls_bonf & nullHypothesis[-(1:positives)]) # FPs is here Vs which represents false positives
bonf_FPs_div_m0 <- bonf_FPs/m0
bonf_FPR <- mean(bonf_FPs_div_m0)
print(bonf_FPR)
start <- 0*m+1
end <- positives
calls_bonf <- res_ex7[start : end, ]
# false positivies are the cases where H0=FALSE & calls=FALSE
bonf_FNs <- colSums(calls_bonf & nullHypothesis[(1:positives)])
bonf_FNs_div_m1 <- bonf_FNs/m1
bonf_FNR <- mean(bonf_FNs_div_m1)
print(bonf_FNR)
calls_bonf
dim(calls_bonf)
bonf_FNs
start <- 0*m+1
end <- positives
calls_bonf <- res_ex7[start : end, ]
# false positivies are the cases where pval>0.05, therefore, the negation to calls_bonf which checked for pval <= 0.05
bonf_FNs <- colSums(!calls_bonf)
bonf_FNs
bonf_FNs_div_m1 <- bonf_FNs/m1
bonf_FNR <- mean(bonf_FNs_div_m1)
print(bonf_FNR)
start <- 1*m+1+m1
end <- 2*m
calls_padjusted <- res_ex7[start : end, ]
# false positives are the cases where H0=TRUE & calls=TRUE
padjusted_FPs <- colSums(calls_padjusted & nullHypothesis[-(1:positives)]) # FPs is here Vs, which represents false positives
padjusted_FPs_div_m0 <- padjusted_FPs/m0
padjusted_FPR <- mean(padjusted_FPs_div_m0)
print(padjusted_FPR)
start <- 0*m+1
end <- start+positives-1
calls_bonf <- res_ex7[start : end, ]
# false positivies are the cases where pval>0.05, therefore, the negation to calls_bonf which checked for pval <= 0.05
bonf_FNs <- colSums(!calls_bonf)
bonf_FNs_div_m1 <- bonf_FNs/m1
bonf_FNR <- mean(bonf_FNs_div_m1)
print(bonf_FNR)
start <- 1*m+1
end <- start+positives-1
start <- 1*m+1
end <- start+positives-1
calls_padjusted <- res_ex7[start : end, ]
# false positivies are the cases where pval>0.05, therefore, the negation to calls_padjusted which checked for pval <= 0.05
padjusted_FNs <- colSums(!calls_padjusted)
padjusted_FNs_div_m1 <- padjusted_FNs/m1
padjusted_FNR <- mean(padjusted_FNs_div_m1)
print(padjusted_FNR)
start <- 2*m+1+m1
end <- 3*m
calls_qvals <- res_ex7[start : end, ]
# false positives are the cases where H0=TRUE & calls=TRUE
qvals_FPs <- colSums(calls_qvals & nullHypothesis[-(1:positives)]) # FPs is here Vs, which represents false positives
qvals_FPs_div_m0 <- qvals_FPs/m0
qvals_FPR <- mean(qvals_FPs_div_m0)
print(qvals_FPR)
start <- 2*m+1
end <- start+positives-1
calls_qvals <- res_ex7[start : end, ]
# false positivies are the cases where pval>0.05, therefore, the negation to calls_qvals which checked for pval <= 0.05
qvals_FNs <- colSums(!calls_qvals)
qvals_FNs_div_m1 <- qvals_FNs/m1
qvals_FNR <- mean(qvals_FNs_div_m1)
print(qvals_FNR)
a <- c(0,0,1,1,0,0,0,1,0,1,0,0,0,1,1,1,0,0)
a
length(a)
mean(a)
median(a)
sd(a)
setwd("~/Desktop/ML_classes/Linear_Models_and_Matrix_Algebra_harvard/week1")
## If you haven't done so already, install the library UsingR
#install.packages("UsingR")
library(UsingR)
data('father.son', package = 'UsingR')
avg_sheight <- mean(father.son$sheight)
print(avg_sheight)
?round
round(1.2)
round(1.5)
## add new fheight variable as integer
father.son$fheight_int <- round(father.son$fheight)
rm(avg_sheight)
avg_sheight_ex1 <- mean(father.son$sheight)
print(avg_sheight_ex1)
## add new fheight variable as integer
father.son$fheight_int <- round(father.son$fheight)
## exercise 2
library(dplyr)
data_ex2 <- father.son %>% filter(fheight_int == 71)
data_ex2
## add new fheight variable as integer
father.son$fheight_int <- round(father.son$fheight)
sheight_ex2 <- father.son %>% filter(fheight_int == 71) %>% select(sheight)
avg_sheight_ex2 <- mean(x = sheight_ex2)
sheight_ex2
mean(sheight_ex2)
sheight_ex2 <- father.son %>% filter(fheight_int == 71) %>% select(sheight) %>% as.numeric()
class(sheight_ex2)
typeof(sheight_ex2)
as.numeric(sheight_ex2)
sheight_ex2 <- father.son %>% filter(fheight_int == 71) %>% select(sheight) %>% full()
avg_sheight_ex2 <- mean(x = sheight_ex2)
sheight_ex2
sheight_ex2 <- father.son %>% filter(fheight_int == 71) %>% select(sheight) %>% unlist()
sheight_ex2
avg_sheight_ex2 <- mean(x = sheight_ex2)
print(avg_sheight_ex2)
X = matrix(1:1000,100,10)
print(X[25,3])
X
?cbind
x <- 1:10
X <- cbind(1*x,
2*x,
3*x,
4*x,
5*x)
print(sum(X[7,]))
sum(X[7,])
X = matrix(1:1000,100,10)
X[25,3]
X = matrix(1:1000,100,10)
X[25,3]
x <- 1:10
X_ex1 = matrix(1:1000,100,10)
X_ex1[25,3]
x <- 1:10
X_ex2 <- cbind(1*x,
2*x,
3*x,
4*x,
5*x)
sum(X_ex2[7,])
# matrix with multiples of 3 in the 3rd column
x <- 11:20
X_ex3 <- rbind(x,
2*x,
3*x)
X_ex3
matrix(1:60,20,3)
?matrix
# matrix with multiples of 3 in the 3rd column
x <- 11:20
X_ex3 <- matrix(data = 1:60, nrow = 20, ncol = 3, byrow = TRUE) # default is byrow = FALSE, indicating numbers increase along columns (downwards)
head(X_ex3)
X[,3]%%3
matrix(1:60,20,3, byrow = T)%%3
matrix(1:60,20,3, byrow = T)%%3 == 0
matrix(1:60,20,3, byrow = T)[,3]%%3 == 0
all(matrix(1:60,20,3, byrow = T)[,3]%%3 == 0)
#to confirm run below
all(X_ex3[,3]%%3 == 0)
X <- matrix(data = c(1,3,2,1,-2,1,1,1,-1) 3,3)
X
X <- matrix(data = c(1,3,2,1,-2,1,1,1,-1), 3,3)
X
beta <- c(3,2,1)
X*beta
X%*%beta
X <- matrix(data = c(1,3,2,1,-2,1,1,1,-1), 3,3)
beta <- c(3,2,1)
x%*%beta
X
beta
X%*%beta
beta%*%X
3+6+2
?solve
X <- matrix(data = c(1,3,2,1,-2,1,1,1,-1), 3,3)
y <- matrix(c(6,2,1), 3, 1)
X <- matrix(data = c(1,3,2,1,-2,1,1,1,-1), 3,3)
y <- matrix(c(6,2,1), 3, 1)
beta_opt <- solve(X)%*%y
beta_opt
solve(X)
# lets make a test to check if X*beta_opt equals y
all(y == X*beta_opt)
X
beta_opt
dim(beta_opt)
X%*%beta_opt
# lets make a test to check if X*beta_opt equals y
all(y == X%*%beta_opt)
y
y == X%*%beta_opt
y[2]
X%*%beta_opt[2]
X%*%beta_opt
X%*%beta_opt[2]
X%*%beta_opt[2,1]
X%*%beta_opt
res <-  X%*%beta_opt
res[2]
y == res
# lets make a test to check if X*beta_opt equals y
X%*%beta_opt
y
# lets make a test to check if X*beta_opt equals y
X%*%beta_opt
y
print( res[2])
print( y[2])
X*solve(X)
X%*%solve(X)
solve(X)%*%X
# HOWEVER, solve only gives approximate values as we can see below, X*inv(X) only gives a fair approximation of a perfect identity matrix
X%*%solve(X)
y <- matrix(data = c(10,
5,
7,
4), nrow = 4, ncol = 1)
X <- matrix(data = c( 3,  2,  1,  5,  #a
4,  2, -1,  0,  #b
-5,  2,  5,  0,  #c
1, -1, -5,  1   #d
))
X
X <- matrix(data = c( 3,  2,  1,  5,  #a
4,  2, -1,  0,  #b
-5,  2,  5,  0,  #c
1, -1, -5,  1,  #d
), nrow = 4,ncol = 4, byrow = FALSE)
y <- matrix(data = c(10,
5,
7,
4), nrow = 4, ncol = 1)
X <- matrix(data = c( 3,  2,  1,  5,  #a
4,  2, -1,  0,  #b
-5,  2,  5,  0,  #c
1, -1, -5,  1,  #d
), nrow = 4,ncol = 4, byrow = FALSE)
X <- matrix(data = c( 3,  2,  1,  5,  #a
4,  2, -1,  0,  #b
-5,  2,  5,  0,  #c
1, -1, -5,  1  #d
), nrow = 4,ncol = 4, byrow = FALSE)
X
sol_ex1 <- solve(X)%*%y
sol_ex1
sol_ex1 <- solve(X)%*%y
cat("The solution for c is:\n")
cat(sol_ex1[3])
?solve
# alternative appraoch:
sol_ex1_alternative <- solve(a = X, b = y) #generic function 'solve()' solves the equation a %*% x = b for x, where b can be either a vector or a matrix.
sol_ex1_alternative[3]
cat(sol_ex1_alternative[3])
# Load the following two matrices into R:
a <- matrix(1:12, nrow=4)
b <- matrix(1:15, nrow=3)
# Load the following two matrices into R:
a <- matrix(1:12, nrow=4)
b <- matrix(1:15, nrow=3)
## exercise 3
matrix_ex3 <- a%*%b
matrix_ex3
cat(matrix_ex3[3,2])
row_a <- a[3,]
col_b <- b[,2]
row_a
col_b
a*b
row_a * col_b
matrix_ex4 <- row_a * col_b
cat(sum(matrix_ex4))
