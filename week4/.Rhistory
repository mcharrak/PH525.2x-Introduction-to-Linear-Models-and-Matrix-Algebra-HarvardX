library(RColorBrewer)
# examine the coefficients
# stripchart produces 1D scatterplots (or dot plots) of the data. Are good alternative to boxplots small sample size
stripchart(x = s,
vertical = TRUE,
pch = 1, # pch=1 gives emtpy circles
method = "jitter",
las = 2,
xlim = c(0,3),
ylim = c(0,2))
# draw lines to represent intercept/average and difference between the two groups
a <- -0.25
lgth <- 0.1
library(RColorBrewer)
cols <- brewer.pal(n = 3, "Dark2")
arrows(x0 = 1+a, x1 = 1+a, y0 = 0, y1 = coefs[1])
# examine the coefficients
# stripchart produces 1D scatterplots (or dot plots) of the data. Are good alternative to boxplots small sample size
stripchart(x = s,
vertical = TRUE,
pch = 1, # pch=1 gives emtpy circles
method = "jitter",
las = 2,
xlim = c(0,3),
ylim = c(0,2))
# draw lines to represent intercept/average and difference between the two groups
a <- -0.25
lgth <- 0.1
library(RColorBrewer)
cols <- brewer.pal(n = 3, "Dark2")
arrows(x0 = 1+a, x1 = 1+a, y0 = 0, y1 = coefs[1])
options(width=120)
opts_chunk$set(comment = "", warning = FALSE, message = FALSE, echo = TRUE, tidy = TRUE, size="small")
library(knitr)
options(width=120)
opts_chunk$set(comment = "", warning = FALSE, message = FALSE, echo = TRUE, tidy = TRUE, size="small")
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv("spider_wolff_gorb_2013.csv", skip=1) # skip=1, allows to skip the first line of the CSV file
# recreate box plot from the paper
boxplot(spider$friction ~ spider$type * spider$leg,
col = c('grey90', 'grey40'), las = 2,  # las argument makes labels perpendicular to each axis
main = "Comparison of friction coefficients of different leg pairs")
# Linear model with one variable
spider.sub <- spider[spider$leg == "L1",] #subset the data, keep rows with L1 legs
fit <- lm(formula = friction ~ type, data = spider.sub)
summary(fit)
# extract the beat coefficients with coef() fct.
coefs <- coef(fit)
# split the data by groups/types
types <- spider.sub$type
s <- split(x = spider.sub$friction, f = types)
# beta0 is the average of the pull group
print(mean(s[["pull"]]))
print(coefs[1])
# beta1 is the difference between the push group and the pull group
print(mean(s[["push"]]) - mean(s[["pull"]]))
print(coefs[2])
# inspect model matrix which was used inside lm() function above
X <- model.matrix(object = friction ~ type, data = spider.sub)
colnames(X)
head(X)
library(rafalib)
library(rafalib)
imagemat(X, main = "Model matrix for linear model with ineractions")
# because the model matrix X has two columns, this graph has two columns;
# first, the intercept term (all 1s i.e. black)
# second, the type column (50% push, 50% pull)
# examine the coefficients
# stripchart produces 1D scatterplots (or dot plots) of the data. Are good alternative to boxplots small sample size
stripchart(x = s,
vertical = TRUE,
pch = 1, # pch=1 gives emtpy circles
method = "jitter",
las = 2,
xlim = c(0,3),
ylim = c(0,2))
# draw lines to represent intercept/average and difference between the two groups
a <- -0.25
lgth <- 0.1
library(RColorBrewer)
cols <- brewer.pal(n = 3, "Dark2")
arrows(x0 = 1+a, x1 = 1+a, y0 = 0, y1 = coefs[1])
# examine the coefficients
# stripchart produces 1D scatterplots (or dot plots) of the data. Are good alternative to boxplots small sample size
stripchart(x = s,
vertical = TRUE,
pch = 1, # pch=1 gives emtpy circles
method = "jitter",
las = 2,
xlim = c(0,3),
ylim = c(0,2))
# draw lines to represent intercept/average and difference between the two groups
a <- -0.25
lgth <- 0.1
library(RColorBrewer)
cols <- brewer.pal(n = 3, "Dark2")
arrows(x0 = 1+a, x1 = 1+a, y0 = 0, y1 = coefs[1])
# examine the coefficients
# stripchart produces 1D scatterplots (or dot plots) of the data. Are good alternative to boxplots small sample size
stripchart(x = s,
vertical = TRUE,
pch = 1, # pch=1 gives emtpy circles
method = "jitter",
las = 2,
xlim = c(0,3),
ylim = c(0,2))
# draw lines to represent intercept/average and difference between the two groups
a <- -0.25
lgth <- 0.1
library(RColorBrewer)
cols <- brewer.pal(n = 3, "Dark2")
arrows(x0 = 1+a, x1 = 1+a, y0 = 0, y1 = coefs[1])
# examine the coefficients
# stripchart produces 1D scatterplots (or dot plots) of the data. Are good alternative to boxplots small sample size
stripchart(x = s,
vertical = TRUE,
pch = 1, # pch=1 gives emtpy circles
method = "jitter",
las = 2,
xlim = c(0,3),
ylim = c(0,2))
# draw lines to represent intercept/average and difference between the two groups
a <- -0.25
lgth <- 0.1
library(RColorBrewer)
cols <- brewer.pal(n = 3, "Dark2")
arrows(x0 = 1+a, x1 = 1+a, y0 = 0, y1 = coefs[1], col = cols[1], length = lgth)
# examine the coefficients
# stripchart produces 1D scatterplots (or dot plots) of the data. Are good alternative to boxplots small sample size
stripchart(x = s,
vertical = TRUE,
pch = 1, # pch=1 gives emtpy circles
method = "jitter",
las = 2,
xlim = c(0,3),
ylim = c(0,2))
# draw lines to represent intercept/average and difference between the two groups
a <- -0.25
lgth <- 0.1
library(RColorBrewer)
cols <- brewer.pal(n = 3, "Dark2")
arrows(x0 = 1+a, x1 = 1+a, y0 = 0, y1 = coefs[1], col = cols[1])
abline(h = coefs[1]) #draw horizontal line
# examine the coefficients
# stripchart produces 1D scatterplots (or dot plots) of the data. Are good alternative to boxplots small sample size
stripchart(x = s,
vertical = TRUE,
pch = 1, # pch=1 gives emtpy circles
method = "jitter",
las = 2,
xlim = c(0,3),
ylim = c(0,2))
# draw lines to represent intercept/average and difference between the two groups
a <- -0.25
lgth <- 0.1
library(RColorBrewer)
cols <- brewer.pal(n = 3, "Dark2")
arrows(x0 = 1+a, x1 = 1+a, y0 = 0, y1 = coefs[1], col = cols[1], length = lgth)
abline(h = coefs[1]) #draw horizontal line
# examine the coefficients
# stripchart produces 1D scatterplots (or dot plots) of the data. Are good alternative to boxplots small sample size
stripchart(x = s,
vertical = TRUE,
pch = 1, # pch=1 gives emtpy circles
method = "jitter",
las = 2,
xlim = c(0,3),
ylim = c(0,2))
# draw lines to represent intercept/average and difference between the two groups
a <- -0.25
lgth <- 0.1
library(RColorBrewer)
cols <- brewer.pal(n = 3, "Dark2")
arrows(x0 = 1+a, x1 = 1+a, y0 = 0, y1 = coefs[1], col = cols[1], length = lgth)
abline(h = coefs[1], col = cols[1]) #draw horizontal line
# examine the coefficients
# stripchart produces 1D scatterplots (or dot plots) of the data. Are good alternative to boxplots small sample size
stripchart(x = s,
vertical = TRUE,
pch = 1, # pch=1 gives emtpy circles
method = "jitter",
las = 2,
xlim = c(0,3),
ylim = c(0,2))
# draw lines to represent intercept/average and difference between the two groups
a <- -0.25
lgth <- 0.1
library(RColorBrewer)
cols <- brewer.pal(n = 3, "Dark2")
arrows(x0 = 1+a, x1 = 1+a, y0 = 0, y1 = coefs[1], lwd = 3, col = cols[1], length = lgth)
abline(h = coefs[1], col = cols[1]) #draw horizontal line
arrows(x0 = 2+a, x1 = 2+a, y0 = 0, y1 = coefs[1]+coefs[2], lwd = 3, col = cols[2], length = lgth)
# examine the coefficients
# stripchart produces 1D scatterplots (or dot plots) of the data. Are good alternative to boxplots small sample size
stripchart(x = s,
vertical = TRUE,
pch = 1, # pch=1 gives emtpy circles
method = "jitter",
las = 2,
xlim = c(0,3),
ylim = c(0,2))
# draw lines to represent intercept/average and difference between the two groups
a <- -0.25
lgth <- 0.1
library(RColorBrewer)
cols <- brewer.pal(n = 3, "Dark2")
arrows(x0 = 1+a, x1 = 1+a, y0 = 0, y1 = coefs[1], lwd = 3, col = cols[1], length = lgth)
abline(h = coefs[1], col = cols[1]) #draw horizontal line
arrows(x0 = 2+a, x1 = 2+a, y0 = 0, y1 = coefs[1]+coefs[2], lwd = 3, col = cols[2], length = lgth)
abline(h = coefs[1]+coefs[2], col = cols[2]) #draw horizontal line
# examine the coefficients
# stripchart produces 1D scatterplots (or dot plots) of the data. Are good alternative to boxplots small sample size
stripchart(x = s,
vertical = TRUE,
pch = 1, # pch=1 gives emtpy circles
method = "jitter",
las = 2,
xlim = c(0,3),
ylim = c(0,2))
# draw lines to represent intercept/average and difference between the two groups
a <- -0.25
lgth <- 0.1
library(RColorBrewer)
cols <- brewer.pal(n = 3, "Dark2")
arrows(x0 = 1+a, x1 = 1+a, y0 = 0, y1 = coefs[1], lwd = 3, col = cols[1], length = lgth)
abline(h = coefs[1], col = cols[1]) #draw horizontal line
arrows(x0 = 2+a, x1 = 2+a, y0 = coefs[1]+coefs[2], y1 = 0, lwd = 3, col = cols[2], length = lgth)
abline(h = coefs[1]+coefs[2], col = cols[2]) #draw horizontal line
# examine the coefficients
# stripchart produces 1D scatterplots (or dot plots) of the data. Are good alternative to boxplots small sample size
stripchart(x = s,
vertical = TRUE,
pch = 1, # pch=1 gives emtpy circles
method = "jitter",
las = 2,
xlim = c(0,3),
ylim = c(0,2))
# draw lines to represent intercept/average and difference between the two groups
a <- -0.25
lgth <- 0.1
library(RColorBrewer)
cols <- brewer.pal(n = 3, "Dark2")
arrows(x0 = 1+a, x1 = 1+a, y0 = 0, y1 = coefs[1], lwd = 3, col = cols[1], length = lgth)
abline(h = coefs[1], col = cols[1]) #draw horizontal line
arrows(x0 = 2+a, x1 = 2+a, y0 = coefs[1], y1 = coefs[1]+coefs[2], lwd = 3, col = cols[2], length = lgth)
abline(h = coefs[1]+coefs[2], col = cols[2]) #draw horizontal line
# examine the coefficients
# stripchart produces 1D scatterplots (or dot plots) of the data. Are good alternative to boxplots small sample size
stripchart(x = s,
vertical = TRUE,
pch = 1, # pch=1 gives emtpy circles
method = "jitter",
las = 2,
xlim = c(0,3),
ylim = c(0,2))
# draw lines to represent intercept/average and difference between the two groups
a <- -0.25
lgth <- 0.1
library(RColorBrewer)
cols <- brewer.pal(n = 3, "Dark2")
arrows(x0 = 1+a, x1 = 1+a, y0 = 0, y1 = coefs[1], lwd = 3, col = cols[1], length = lgth)
abline(h = coefs[1], col = cols[1]) #draw horizontal line
arrows(x0 = 2+a, x1 = 2+a, y0 = coefs[1], y1 = coefs[1]+coefs[2], lwd = 3, col = cols[2], length = lgth)
abline(h = coefs[1]+coefs[2], col = cols[2]) #draw horizontal line
legend("right", names(coefs), fill = cols, cex = 0.75, bg = "white")
names(coefs)
# a linear model with two variables
X <- model.matrix(object = ~ type + leg, data = spider)
colnames(X)
norw(X)
nrow(X)
imagemat(x = X, main = "Model matrix for linear model with 2 factors") #factor here means variables (leg-type and push-type)
fit <- lm(data = spider, formula = friction ~ type +leg)
fit2 <- lm(data = spider, formula = friction ~ type +leg)
rm(fit)
# a linear model with two variables
X <- model.matrix(object = ~ type + leg, data = spider)
colnames(X)
head(X)
imagemat(x = X, main = "Model matrix for linear model with 2 factors") #factor here means variables (leg-type and push-type)
fit2 <- lm(data = spider, formula = friction ~ type +leg)
summary(fit)
summary(fit2)
coefs <- coef(fit2)
# a linear model with two variables
X <- model.matrix(object = ~ type + leg, data = spider)
colnames(X)
head(X)
imagemat(x = X, main = "Model matrix for linear model with 2 factors") #factor here means variables (leg-type and push-type)
fit2 <- lm(data = spider, formula = friction ~ type +leg)
summary(fit2)
coefs <- coef(fit2)
spider$leg
# examining the coefficients
spider$group <- factor(paste0(spider$leg, spider$type))
spider$group
stripchart(x = split(spider$friction, spider$group),
vertical = TRUE, pch = 1, method = "jitter", las = 2,
xlim = c(0,11), ylim = c(0,2))
?split
split(x = spider$friction, f = spider$group)
A <- split(x = spider$friction, f = spider$group)
class(A)
class(A[1])
A[1]
rm(A)
?Dark2
?brewer.pal
# examining the coefficients
spider$group <- factor(paste0(spider$leg, spider$type))
# split divides the data in the vector x into the groups defined by f; split() returns a list
stripchart(x = split(x = spider$friction, f = spider$group),
vertical = TRUE, pch = 1, method = "jitter", las = 2,
xlim = c(0,11), ylim = c(0,2))
cols <- brewer.pal(n = 5, name = "Dark2") # creates nice looking set of colors
abline(h=0)
# examining the coefficients
spider$group <- factor(paste0(spider$leg, spider$type))
# split divides the data in the vector x into the groups defined by f; split() returns a list
stripchart(x = split(x = spider$friction, f = spider$group),
vertical = TRUE, pch = 1, method = "jitter", las = 2,
xlim = c(0,11), ylim = c(0,2))
cols <- brewer.pal(n = 5, name = "Dark2") # creates nice looking set of colors
# draw arrows to visualize different references and effects
abline(h=0)
arrows(1+a,0,1+a,coefs[1],lwd=3,col=cols[1],length=lgth)
abline(h=coefs[1],col=cols[1])
arrows(3+a,coefs[1],3+a,coefs[1]+coefs[3],lwd=3,col=cols[3],length=lgth)
arrows(5+a,coefs[1],5+a,coefs[1]+coefs[4],lwd=3,col=cols[4],length=lgth)
arrows(7+a,coefs[1],7+a,coefs[1]+coefs[5],lwd=3,col=cols[5],length=lgth)
arrows(2+a,coefs[1],2+a,coefs[1]+coefs[2],lwd=3,col=cols[2],length=lgth)
segments(3+a,coefs[1]+coefs[3],4+a,coefs[1]+coefs[3],lwd=3,col=cols[3])
arrows(4+a,coefs[1]+coefs[3],4+a,coefs[1]+coefs[3]+coefs[2],lwd=3,col=cols[2],length=lgth)
segments(5+a,coefs[1]+coefs[4],6+a,coefs[1]+coefs[4],lwd=3,col=cols[4])
arrows(6+a,coefs[1]+coefs[4],6+a,coefs[1]+coefs[4]+coefs[2],lwd=3,col=cols[2],length=lgth)
segments(7+a,coefs[1]+coefs[5],8+a,coefs[1]+coefs[5],lwd=3,col=cols[5])
arrows(8+a,coefs[1]+coefs[5],8+a,coefs[1]+coefs[5]+coefs[2],lwd=3,col=cols[2],length=lgth)
legend("right",names(coefs),fill=cols,cex=.75,bg="white")
coefs
install.packages("contrast")
# contrasting the coefficients
library(contrast)
?contrast
L3vsL2 <- contrast(fit = fit2, list(leg = "L3", type = "pull"), list(leg = "L2", type = "pull"))
L3vsL2
coefs
coefs[4] - coefs[3]
L3vsL2$X
# coefs[4] refers to L3-L1; L1 being the reference
# coefs[3] refers to L2-L1; L1 being the reference
# THUS: coefs[4] - coefs[3] refers to L3-L1-(L2-L1) = L3-L2 => the difference between L3 and L2
C <- L3vsL2$X
C
cat(C)
C
print(C)
C
beta
cat(beta])
cat(beta)
C %*% beta
coefs
library(knitr)
options(width=120)
opts_chunk$set(comment = "", warning = FALSE, message = FALSE, echo = TRUE, tidy = TRUE, size="small")
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv("spider_wolff_gorb_2013.csv", skip=1) # skip=1, allows to skip the first line of the CSV file
# recreate box plot from the paper
boxplot(spider$friction ~ spider$type * spider$leg,
col = c('grey90', 'grey40'), las = 2,  # las argument makes labels perpendicular to each axis
main = "Comparison of friction coefficients of different leg pairs")
# Linear model with one variable
spider.sub <- spider[spider$leg == "L1",] #subset the data, keep rows with L1 legs
fit <- lm(formula = friction ~ type, data = spider.sub)
summary(fit)
# extract the beat coefficients with coef() fct.
coefs <- coef(fit)
# split the data by groups/types
types <- spider.sub$type
s <- split(x = spider.sub$friction, f = types)
# beta0 is the average of the pull group
print(mean(s[["pull"]]))
print(coefs[1])
# beta1 is the difference between the push group and the pull group
print(mean(s[["push"]]) - mean(s[["pull"]]))
print(coefs[2])
# inspect model matrix which was used inside lm() function above
X <- model.matrix(object = friction ~ type, data = spider.sub)
colnames(X)
head(X)
library(rafalib)
library(rafalib)
imagemat(X, main = "Model matrix for linear model with ineractions")
# because the model matrix X has two columns, this graph has two columns;
# first, the intercept term (all 1s i.e. black)
# second, the type column (50% push, 50% pull)
# examine the coefficients
# stripchart produces 1D scatterplots (or dot plots) of the data. Are good alternative to boxplots small sample size
stripchart(x = s,
vertical = TRUE,
pch = 1, # pch=1 gives emtpy circles
method = "jitter",
las = 2,
xlim = c(0,3),
ylim = c(0,2))
# draw lines to represent intercept/average and difference between the two groups
a <- -0.25
lgth <- 0.1
library(RColorBrewer)
cols <- brewer.pal(n = 3, "Dark2")
arrows(x0 = 1+a, x1 = 1+a, y0 = 0, y1 = coefs[1], lwd = 3, col = cols[1], length = lgth)
abline(h = coefs[1], col = cols[1]) #draw horizontal line
arrows(x0 = 2+a, x1 = 2+a, y0 = coefs[1], y1 = coefs[1]+coefs[2], lwd = 3, col = cols[2], length = lgth)
abline(h = coefs[1]+coefs[2], col = cols[2]) #draw horizontal line
legend("right", names(coefs), fill = cols, cex = 0.75, bg = "white")
# a linear model with two variables
X <- model.matrix(object = ~ type + leg, data = spider)
colnames(X)
head(X)
imagemat(x = X, main = "Model matrix for linear model with 2 factors") #factor here means variables (leg-type and push-type)
fit2 <- lm(data = spider, formula = friction ~ type +leg)
summary(fit2)
coefs <- coef(fit2)
cat(C)
C
# contrasting the coefficients
### COMPARING TWO GROUPS, WHERE NONE OF THEM IS THE REFERENCE LEVEL => USING A CONTRAST (COMPARISON OF COEFFICIENTS) ###
library(contrast)
# contrasting the coefficients
### COMPARING TWO GROUPS, WHERE NONE OF THEM IS THE REFERENCE LEVEL => USING A CONTRAST (COMPARISON OF COEFFICIENTS) ###
library(contrast)
L3vsL2 <- contrast(fit = fit2, list(leg = "L3", type = "pull"), list(leg = "L2", type = "pull"))
L3vsL2
coefs[4] - coefs[3]
# coefs[4] refers to L3-L1; L1 being the reference
# coefs[3] refers to L2-L1; L1 being the reference
# THUS: coefs[4] - coefs[3] refers to L3-L1-(L2-L1) = L3-L2 => the difference between L3 and L2
C <- L3vsL2$X
C
class(C)
View(C)
View(C)
names(C)
C %*% coefs
# lets use push instead of pull and compute the L3-L2 coefficient again
L3vsL2.equiv <- contrast(fit = fit2, list(leg = "L3", type = "push"), list(leg = "L2", type = "push"))
L3vsL2.equiv
cat(L3vsL2.equiv$X)
L3vsL2.equiv
L3vsL2.equiv$X
# contrasting the coefficients
### COMPARING TWO GROUPS, WHERE NONE OF THEM IS THE REFERENCE LEVEL => USING A CONTRAST (COMPARISON OF COEFFICIENTS) ###
library(contrast)
L3vsL2 <- contrast(fit = fit2, list(leg = "L3", type = "pull"), list(leg = "L2", type = "pull"))
L3vsL2
coefs[4] - coefs[3]
# coefs[4] refers to L3-L1; L1 being the reference
# coefs[3] refers to L2-L1; L1 being the reference
# THUS: coefs[4] - coefs[3] refers to L3-L1-(L2-L1) = L3-L2 => the difference between L3 and L2
C <- L3vsL2$X
C %*% coefs
# lets use push instead of pull and compute the L3-L2 coefficient again
L3vsL2.equiv <- contrast(fit = fit2, list(leg = "L3", type = "push"), list(leg = "L2", type = "push"))
L3vsL2.equiv$X
L3vsL2.equiv$X
L3vsL2.equiv$X
L3vsL2.equiv
# coefs[4] refers to L3-L1; L1 being the reference
# coefs[3] refers to L2-L1; L1 being the reference
# THUS: coefs[4] - coefs[3] refers to L3-L1-(L2-L1) = L3-L2 => the difference between L3 and L2
C <- L3vsL2
C %*% coefs
# contrasting the coefficients
### COMPARING TWO GROUPS, WHERE NONE OF THEM IS THE REFERENCE LEVEL => USING A CONTRAST (COMPARISON OF COEFFICIENTS) ###
library(contrast)
L3vsL2 <- contrast(fit = fit2, list(leg = "L3", type = "pull"), list(leg = "L2", type = "pull"))
L3vsL2
coefs[4] - coefs[3]
# coefs[4] refers to L3-L1; L1 being the reference
# coefs[3] refers to L2-L1; L1 being the reference
# THUS: coefs[4] - coefs[3] refers to L3-L1-(L2-L1) = L3-L2 => the difference between L3 and L2
C <- L3vsL2
C %*% coefs
# coefs[4] refers to L3-L1; L1 being the reference
# coefs[3] refers to L2-L1; L1 being the reference
# THUS: coefs[4] - coefs[3] refers to L3-L1-(L2-L1) = L3-L2 => the difference between L3 and L2
C <- L3vsL2$X
C %*% coefs
# lets use push instead of pull and compute the L3-L2 coefficient again
L3vsL2.equiv <- contrast(fit = fit2, list(leg = "L3", type = "push"), list(leg = "L2", type = "push"))
L3vsL2.equiv
L3vsL2.equiv$X
# contrasting the coefficients
### COMPARING TWO GROUPS, WHERE NONE OF THEM IS THE REFERENCE LEVEL => USING A CONTRAST (COMPARISON OF COEFFICIENTS) ###
library(contrast)
L3vsL2 <- contrast(fit = fit2, list(leg = "L3", type = "pull"), list(leg = "L2", type = "pull"))
L3vsL2
coefs[4] - coefs[3]
# coefs[4] refers to L3-L1; L1 being the reference
# coefs[3] refers to L2-L1; L1 being the reference
# THUS: coefs[4] - coefs[3] refers to L3-L1-(L2-L1) = L3-L2 => the difference between L3 and L2
C <- L3vsL2$X
C %*% coefs
# lets use push instead of pull and compute the L3-L2 coefficient again
L3vsL2.equiv <- contrast(fit = fit2, list(leg = "L3", type = "push"), list(leg = "L2", type = "push"))
L3vsL2.equiv$X
