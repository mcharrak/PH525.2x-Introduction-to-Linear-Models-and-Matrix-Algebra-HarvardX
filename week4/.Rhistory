N <- 40
p <- 4
group <- factor(rep(x = 1:p, each = N/p))
group
X <- model.matrix(~ group)
X
# first generate some random, null data, where the mean is the same for all groups:
Y <- rnorm(N,mean=42,7)
# the base model we will compare against is simply Y-hat = mean(Y), which we will call mu0,
# and the initial sum of squares is the Y values minus mu0
m0 <- mean(Y)
initial.ss <- sum( (Y-m0)^2)
group
# compute fitted values for each group
s <- split(x = Y, f = group)
s
?sapply
# define function to cmpute the Sum of Squared Residuals (SSR)
compute_SSR <- function(x) {
R <- (x - ) # residuals
SR  <- R^2 # squared residuals
SSR <- sum(SR) # sum of squared residuals
return(SSR)
}
# define function to cmpute the Sum of Squared Residuals (SSR)
compute_SSR <- function(x) {
R <- (x - ) # residuals
SR  <- R^2 # squared residuals
SSR <- sum(SR) # sum of squared residuals
return(SSR)
}
# define function to cmpute the Sum of Squared Residuals (SSR)
compute_SSR <- function(x) {
R <- (x - ) # residuals
SR  <- R^2 # squared residuals
SSR <- sum(SR) # sum of squared residuals
return(SSR)
}
# define function to cmpute the Sum of Squared Residuals (SSR)
compute_SSR <- function(x) {
R <- (x - mean(x)) # residuals
SR  <- R^2 # squared residuals
SSR <- sum(SR) # sum of squared residuals
return(SSR)
}
after.group.ss <- sum(sapply(X = s, FUN = compute_SSR) # use sapply to perform same function on each element of input X
after.group.ss <- sum(sapply(X = s, FUN = compute_SSR)) # use sapply to perform same function on each element of input X
after.group.ss
initial.ss
# NOW theexplanatory power of the 'group' variable is the initial sum of squares minus the residual sum of squares:
group.ss <- initial.ss - after.group.ss
# calculate means of groups.ss and after.group.ss
group.ms <- group.ss / (p - 1)
after.group.ms <- after.group.ss / (N - p)
#  F-value is simply the ratio of these mean sum of squares
f.value <- group.ms / after.group.ms
f.value
B <- 1000
set.seed(1)
B <- 1000
set.seed(1)
fvals <- replicate(n = B, expr = {
Y <- rnorm(N,mean=42,7)
m0 <- mean(Y)
initial.ss <- sum( (Y-m0)^2)
s <- split(x = Y, f = group)
after.group.ss <- sum(sapply(X = s, FUN = compute_SSR))
group.ss <- initial.ss - after.group.ss
group.ms <- group.ss / (p - 1)
after.group.ms <- after.group.ss / (N - p)
f.value <- group.ms / after.group.ms
f.value
})
hist(fvals)
cat(mean(fvals))
hist(fvals, freq = T)
mypar(1)
hist(fvals, freq = T)
hist(fvals, freq = F)
hist(fvals, col = "grey" freq = FALSE)
hist(fvals, col = "grey", freq = FALSE)
hist(fvals, col = "grey", freq = FALSE, breaks = 50)
hist(fvals, col = "grey", freq = FALSE)
hist(fvals, col = "grey", freq = FALSE, breaks = 50)
?seq
# overlay theoretical F-distribution with params: df1 = p-1, df2 = N - p
xs <- seq(from=0, to=6, length = 100)
lines(xs, df(x = xs, df1 = p-1, df2 = N-p), col = "red")
12*9
108+3*18
spider
head(spider)
# a different specification for the same model as above with interactions
spider$group <- factor(paste0(spider$leg, spider$type))
head(spider)
colnames(X)
head(X)
imagemat(x = X, main = "Model matrix for linear model with interactions")
colnames(X)
library(knitr)
options(width=120)
opts_chunk$set(comment = "", warning = FALSE, message = FALSE, echo = TRUE, tidy = TRUE, size="small")
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv("spider_wolff_gorb_2013.csv", skip=1) # skip=1, allows to skip the first line of the CSV file
# a different specification for the same model as above with interactions
spider$group <- factor(paste0(spider$leg, spider$type))
X <- model.matrix(~ 0 + group, data = spider) # 0 says: we do not want an intercept in the model matrix X
colnames(X)
head(X)
imagemat(x = X, main = "Model matrix for linear model with interactions")
library(rafalib)
# a different specification for the same model as above with interactions
spider$group <- factor(paste0(spider$leg, spider$type))
X <- model.matrix(~ 0 + group, data = spider) # 0 says: we do not want an intercept in the model matrix X
colnames(X)
head(X)
imagemat(x = X, main = "Model matrix for linear model with interactions")
fit4 <- lm(friction ~ 0 + group, data = spider)
summary(fit4)
coefs <- coef(fit4)
stripchart(x = split(x = spider$friction, f = spider$group),
vertical = T, pch = 1, method = "jitter", las = 2,
xlim = c(0,11), ylim = c(0,2))
library(RColorBrewer)
cols <- brewer.pal(n = 8, name = "Dark2")
a <- -0.25
lgth <- 0.1
abline(h=0)
stripchart(x = split(x = spider$friction, f = spider$group),
vertical = T, pch = 1, method = "jitter", las = 2,
xlim = c(0,11), ylim = c(0,2))
library(RColorBrewer)
cols <- brewer.pal(n = 8, name = "Dark2")
a <- -0.25
lgth <- 0.1
abline(h=0)
stripchart(x = split(x = spider$friction, f = spider$group),
vertical = T, pch = 1, method = "jitter", las = 2,
xlim = c(0,11), ylim = c(0,2))
library(RColorBrewer)
cols <- brewer.pal(n = 8, name = "Dark2")
a <- -0.25
lgth <- 0.1
abline(h=0)
library(RColorBrewer)
stripchart(x = split(x = spider$friction, f = spider$group),
vertical = T, pch = 1, method = "jitter", las = 2,
xlim = c(0,11), ylim = c(0,2))
cols <- brewer.pal(n = 8, name = "Dark2")
a <- -0.25
lgth <- 0.1
abline(h=0)
stripchart(x = split(x = spider$friction, f = spider$group),
vertical = T, pch = 1, method = "jitter", las = 2,
xlim = c(0,11), ylim = c(0,2))
abline(h=0)
options(width=120)
opts_chunk$set(comment = "", warning = FALSE, message = FALSE, echo = TRUE, tidy = TRUE, size="small")
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv("spider_wolff_gorb_2013.csv", skip=1) # skip=1, allows to skip the first line of the CSV file
library(rafalib)
# a different specification for the same model as above with interactions
spider$group <- factor(paste0(spider$leg, spider$type))
X <- model.matrix(~ 0 + group, data = spider) # 0 says: we do not want an intercept in the model matrix X
colnames(X)
head(X)
imagemat(x = X, main = "Model matrix for linear model with interactions")
# we have 8 different combinations for {L1,L2,L3,L4} and {push,pull}. Thus, 8 columns in total.
fit4 <- lm(friction ~ 0 + group, data = spider)
summary(fit4)
coefs <- coef(fit4)
stripchart(x = split(x = spider$friction, f = spider$group),
vertical = T, pch = 1, method = "jitter", las = 2,
xlim = c(0,11), ylim = c(0,2))
library(RColorBrewer)
cols <- brewer.pal(n = 8, name = "Dark2")
a <- -0.25
lgth <- 0.1
abline(h=0)
stripchart(x = split(x = spider$friction, f = spider$group),
vertical = T, pch = 1, method = "jitter", las = 2,
xlim = c(0,11), ylim = c(0,2))
library(RColorBrewer)
cols <- brewer.pal(n = 8, name = "Dark2")
a <- -0.25
lgth <- 0.1
abline(h=0)
stripchart(x = split(x = spider$friction, f = spider$group),
vertical = T, pch = 1, method = "jitter", las = 2,
xlim = c(0,11), ylim = c(0,2))
library(RColorBrewer)
cols <- brewer.pal(n = 8, name = "Dark2")
a <- -0.25
lgth <- 0.1
abline(h=0)
for (i in 1:8) {
arrows(i+a, 0, i+a, coefs[i],lwd=3,col=cols[i],length = lgth)
}
legend("right", names(coefs), fill=cols, cex=.75,bg="white")
# example: if we want to contrast push vs pull in the L2 group:
groupL2push.vs.pull <- contrast(fit = fit4,
list(group="L2push"),
list(group="L2pull"))
#now let's make contrasts using the contrast package
library(contrast)
# example: if we want to contrast push vs pull in the L2 group:
groupL2push.vs.pull <- contrast(fit = fit4,
list(group="L2push"),
list(group="L2pull"))
groupL2push.vs.pull
colnames(X)
coefs[4] - coefs[3] # for "groupL2push" - "groupL2pull"
library(multcomp)
# contrasting the differenes of differences when ther is not an intercept
# example contrasting difference between L3 and L2 - push vs pull - effects
C <- matrix(c(0,0,-1,1,-1,1,0,0), nrow = 1)
groupL3vsL2interaction <- glht(linfct = C, model = fit4)
cat(groupL3vsL2interaction)
groupL3vsL2interaction
groupL3vsL2interaction$coef
groupL3vsL2interaction
# or manually
(coefs[6] - coefs[5]) - (coefs[4] - coefs[3])
# contrasting the differenes of differences when ther is not an intercept
# example contrasting difference between L3 and L2 - push vs pull - effects
C <- matrix(c(0,0,1,-1,1,-1,0,0), nrow = 1)
groupL3vsL2interaction <- glht(linfct = C, model = fit4)
groupL3vsL2interaction
# or manually
(coefs[6] - coefs[5]) - (coefs[4] - coefs[3])
# which equals:
coefs[3] - coefs[4] - coefs[5] + coefs[6] # from which we read the contrast vector C as: [0,0,  1,-1,  -1,1,  0,0]
C <- matrix(c(0,0,   1,-1,   -1,1,   0,0), nrow = 1)
library(multcomp)
# contrasting the differenes of differences when ther is not an intercept
# example contrasting difference between L3 and L2 - push vs pull - effects
# manually done as follows:
(coefs[6] - coefs[5]) - (coefs[4] - coefs[3]) # this is the difference of two differences
# which equals:
coefs[3] - coefs[4] - coefs[5] + coefs[6] # from which we read the contrast vector C as: [0,0,  1,-1,  -1,1,  0,0]
C <- matrix(c(0,0,   1,-1,   -1,1,   0,0), nrow = 1)
groupL3vsL2interaction <- glht(linfct = C, model = fit4)
groupL3vsL2interaction
# which equals:
cat(coefs[3] - coefs[4] - coefs[5] + coefs[6]) # from which we read the contrast vector C as: [0,0,  1,-1,  -1,1,  0,0]
# rank of a matrix (e.g. design matrix)
set.seed(1)
Sex <- c(0,0,0,0,1,1,1,1)
A <- c(1,1,0,0,0,0,0,0)
B <- c(0,0,1,1,0,0,0,0)
C <- c(0,0,0,0,1,1,0,0)
D <- c(0,0,0,0,0,0,1,1)
X <- model.matrix(~ Sex + A + B + C + D - 1)
X
?qr
# rank of a matrix (e.g. design matrix)
set.seed(1)
Sex <- c(0,0,0,0,1,1,1,1)
A <- c(1,1,0,0,0,0,0,0)
B <- c(0,0,1,1,0,0,0,0)
C <- c(0,0,0,0,1,1,0,0)
D <- c(0,0,0,0,0,0,1,1)
X <- model.matrix(~ Sex + A + B + C + D - 1)
cat("ncol=",ncol(X), "rank=", qr(X)$rank, "\n")
# solve such collinearity issue with correct experiment design:
# balance sex and treatmetn by assigning 1 female and 1 male to each of the four treatments
Sex <- c(0,0,0,0,1,1,1,1)
A <- c(1,1,0,0,0,0,0,0)
B <- c(0,0,1,1,0,0,0,0)
C <- c(0,0,0,0,1,1,0,0)
D <- c(0,0,0,0,0,0,1,1)
X <- model.matrix(~ Sex + A + B + C + D - 1)
cat("ncol=",ncol(X), "rank=", qr(X)$rank, "\n")
# solve such collinearity issue with correct experiment design:
# balance sex and treatmetn by assigning 1 female and 1 male to each of the four treatments
Sex <- c(0,1,0,1,0,1,0,1)
A <- c(1,1,0,0,0,0,0,0)
B <- c(0,0,1,1,0,0,0,0)
C <- c(0,0,0,0,1,1,0,0)
D <- c(0,0,0,0,0,0,1,1)
X <- model.matrix(~ Sex + A + B + C + D - 1)
cat("ncol=",ncol(X), "rank=", qr(X)$rank, "\n")
# deisgn matrix without collinerity problem: E
# check the rank using qr()$rank base fct.
m <- matrix(c(1,0,0,0, 1,0,1,0, 1,1,0,0, 1,1,1,1), nrow = 4, ncol = 4)
cat("ncol=",ncol(m), "rank=", qr(m)$rank, "\n")
sex <- factor(rep(c("female", "male", each = 4)))
sex
sex <- factor(rep(c("female", "male"), each = 4))
sex
trt <- factor(c("A","A","B","B","C","C","D","D"))
X <- model.matrix(~ sex + trt)
qr(X)$rank
nocl(X)
nocl(X)
ncol(X)
X
# generate some outcome Y
Y <- 1:8
Y
makeYstar <- function(a,b) {
Y - X[,2]*a - X[,5]*b
}
residuals <- Ystar - Xrest*betarest
fitTheRest <- function(a,b) {
Ystar <- makeYstar(a,b)
Xrest <- X[,-c(2,5)]
betarest <- solve(t(Xrest) %*% Xrest) %*% t(Xrest) * Ystar
residuals <- Ystar - Xrest*betarest
sum(residuals^2)
}
# ex2 solution
cat(fitTheRest(a = 1, D = 2))
# ex2 solution
cat(fitTheRest(a = 1, b = 2))
Xrest <- X[,-c(2,5)]
betarest <- solve(t(Xrest) %*% Xrest) %*% t(Xrest) %*% Ystar
residuals <- Ystar - Xrest*betarest
sum(residuals^2)
fitTheRest <- function(a,b) {
Ystar <- makeYstar(a,b)
Xrest <- X[,-c(2,5)]
betarest <- solve(t(Xrest) %*% Xrest) %*% t(Xrest) %*% Ystar
residuals <- Ystar - Xrest*betarest
sum(residuals^2)
}
# ex2 solution
cat(fitTheRest(a = 1, b = 2))
fitTheRest <- function(a,b) {
Ystar <- makeYstar(a,b)
Xrest <- X[,-c(2,5)]
betarest <- solve(t(Xrest) %*% Xrest) %*% t(Xrest) %*% Ystar
residuals <- Ystar - Xrest %*% betarest
sum(residuals^2)
}
# ex2 solution
cat(fitTheRest(a = 1, b = 2))
?expand.grid()
expand.grid(1:3,1:3)
?apply
rss <- apply(X = betas, MARGIN = 1, FUN = fitTheRest(x[1], x[2]))
rss <- apply(X = betas, MARGIN = 1, FUN = function(x) {fitTheRest(x[1], x[2])})
betas <- expand.grid(-2:8,-2:8)
rss <- apply(X = betas, MARGIN = 1, FUN = function(x) {fitTheRest(x[1], x[2])})
rss
min(rss)
?which.min()
which.min(rss)
min_idxs <-  which(rss == min(rss))
min_idxs
betas[min_idxs]
betas[min_idxs,]
# visualise the sum of squares
library(rafalib)
plot(betas[min_idxs,])
seq(1,500,length.out = 50)
set.seed(1)
n <- 50; M <- 500
x <- seq(from = 1,to = M, length.out = n)
X <- cbind(1,x,x^2,x^3)
X <- cbind(1,x,x^2,x^3)
beta <- matrix(data = c(1,1,1,1), nrow = 4, ncol = 1)
# compute outcome y using x times beta plus random normal noise epsilon
y <- X %*% beta + rnorm(n = n, sd = 1)
y
# plot data
plot(x,y)
X
# solve X'X (X' denoting X transposed)
solve(crossprod(X))
head(crossprod(X))
# we get an error. becuase below we see, the values in crossprod(X) have very different numbers (in terms of magnitude)
head(crossprod(X))
log10(crossprod(X))
qr(X)$rank
ncol(X)
# compute QR matrices using qr()
QR <- qr(X)
Q <- qr.Q
R <- qr.R
betahat <- solve(R) %*% crossprod(Q,y)
betahat <- solve(R) %*% crossprod(t(Q),y)
betahat <- solve(R) %*% t(Q) %*% y
solve(R)
solve(R)
R
# compute QR matrices using qr()
QR <- qr(X)
Q <- qr.Q(QR)
R <- qr.R(QR)
betahat <- solve(R) %*% t(Q) %*% y
betahat
# alternatively
betahta_alt <- solve(R) %*% crossprod(Q,y)
# alternatively
betahat_alt <- solve(R) %*% crossprod(Q,y)
rm(betahta_alt)
betahat
betahat_alt
?backsolve
# compute beta using backsolve function
betahat <- backsolve(r = R, x = crossprod(Q,y))
betahat
?solve.qr
# use R built-in function to get beta estimates directly
betahat <- solve.qr(a = QR, b = y)
betahat
# use R built-in function to get beta estimates directly
betahat <- solve.qr(QR, y)
betahat
#fitted <-
# alternatively
fitted <- Q %*% t(X) %*% y
length(fitted)
fitted
#fitted <- Q %*% t(X) %*% y
# alternatively
fitted <- tcrossprod(Q)
#fitted <- Q %*% t(X) %*% y
# alternatively
fitted <- tcrossprod(Q) %*% y
# plot fitted and original data
plot(x,y)
lines(x,fitted,col=2)
QR$qr
dim(QR$qr)
dim(X)
X
QR$rank
length(y)
df <- length(y) - QR$rank
residuals <- y - fitted
squared_residuals <- residuals^2
sigma2 <- sum(squared_residuals)/df
QR$qr
df <- length(y) - QR$rank # compute degrees of freedom: sample size - rank of design matrix used for fitting
residuals <- y - fitted
df <- length(y) - QR$rank # compute degrees of freedom: sample size - rank of design matrix used for fitting
residuals <- y - fitted
squared_residuals <- residuals^2
sigma2 <- sum(squared_residuals)/df
var <- sigma2*chol2inv(QR$qr) # here: chol2inv(QR$qr) gives use the value of (X'X)^(-1)
var
diag(var)
# the diagonal contains the variance of each of the betas
SE <- sqrt(diag(var))
# the diagonal contains the variance of each of the betas
SE <- sqrt(diag(var))
SE
cbind(betahat, SE)
X
# all these computations can be done directly with lm() R function
lm(y ~ X-1) # remove 1 because the design matrix X already includes the intercept
# all these computations can be done directly with lm() R function
fit <- lm(y ~ X-1) # remove 1 because the design matrix X already includes the intercept
summary(fit)
df <- length(y) - QR$rank # compute degrees of freedom: sample size - rank of design matrix used for fitting
residuals <- y - fitted
squared_residuals <- residuals^2
sigma2 <- sum(squared_residuals)/df
var <- sigma2*chol2inv(QR$qr) # here: chol2inv(QR$qr) gives use the value of (X'X)^(-1)
# the diagonal contains the variance of each of the betas
SE <- sqrt(diag(var))
cbind(betahat, SE)
# all these computations can be done directly with lm() R function
summary(lm(y ~ X-1)) # remove 1 because the design matrix X already includes the intercept
# load spider data
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv("spider_wolff_gorb_2013.csv", skip=1) # skip=1, allows to skip the first line of the CSV file
fit <- lm(friction ~ type + leg, data = spider)
# get its beta solution from the fit object
betahat <- coef(fit)
betahat
# construct X and Y matrices
Y <- matrix(spider$friction, ncol = 1)
# construct X and Y matrices
Y <- matrix(spider$friction, ncol = 1)
X <- model.matrix(~ type + leg, data = spider)
#ex1
QR <- qr(X)
Q <- qr.Q(QR)
R <- qr.R(QR)
#solution
cat(Q[1,1])
#solution
cat(R[1,1])
#solution
cat(crossprod(Q,Y))
#solution
cat(crossprod(Q,Y)[1,1])
# compute betahat with QR method manually using: beta = R^(-1)*(Q'Y)
betahatQR <- backsolve(r = R, x = crossprod(Q,y))
# compute betahat with QR method manually using: beta = R^(-1)*(Q'Y)
betahatQR <- backsolve(r = R, x = crossprod(Q,Y))
# compute betahat with QR method manually using: beta = R^(-1)*(Q'Y)
betahatQR <- backsolve(r = R, x = crossprod(Q,Y))
all.equal(betahat, betahatQR)
betahatQR == betahat
betahatQR
betahat
cat(betahat)
cat(betahatQR)
all.equal(cat(betahat),cat(betahatQR))
