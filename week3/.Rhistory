start <- 2*m+1
end <- start+positives-1
calls_qvals <- res_ex7[start : end, ]
# false positivies are the cases where pval>0.05, therefore, the negation to calls_qvals which checked for pval <= 0.05
qvals_FNs <- colSums(!calls_qvals)
qvals_FNs_div_m1 <- qvals_FNs/m1
qvals_FNR <- mean(qvals_FNs_div_m1)
print(qvals_FNR)
a <- c(0,0,1,1,0,0,0,1,0,1,0,0,0,1,1,1,0,0)
a
length(a)
mean(a)
median(a)
sd(a)
library(UsingR)
x = father.son$fheight
y = father.son$sheight
n = length(y)
N = 50
set.seed(1)
index = sample(n,N)
sampledat = father.son[index,]
x = sampledat$fheight
y = sampledat$sheight
betahat = lm(y~x)$coef
fit = lm(y ~ x)
y_hat <- fit$fitted.values
res <- y - y_hat
SSR <- sum(res^2)
SSR
p <- length(betahat)
df <- N - p
sigma2 <- SSR/df
sigma2/df
df
SSR
330/48
p
sigma2
## exercise 2
X = cbind(rep(1,N), x)
dim(X)
inv_X_prime_X <- solve(t(X)%*%X)
cat(inv_X_prime_X[1,1])
inv_X_prime_X
diag(inv_X_prime_X)
diagonal <- diag(inv_X_prime_X)
var_estimates <- sigma2*diagonal
se_estimates <- sqrt(var_estimates)
cat('Standard error of the slope coefficient:\n')
cat(se_estimates[1])
cat(se_estimates[2])
betahat
# compare to lm output:
summary(fit)
##
y <- rnorm(1e6)
x <- cbind(rep(1,1e6), rep(0:1, each = 5e5))
beta <- c(1,1)
y
dim(y)
rep(1,10)
rep(0:1)
rep(0:1, each = 10)
rep(0:1, each = 100)
length(rep(0:1, each = 100))
dim(x)
2*5e5
# measure time to execute matrix multiplication
system.time( {sum((y - x %*% beta)^2)} )
(y - x %*% beta)^2
dim((y - x %*% beta)^2)
sum((y - x %*% beta)^2)
# measure time to execute matrix multiplication
system.time({
sum((y - x %*% beta)^2)
})
# compared to loop
system.time( {
sum(sapply(seq_along(y), function(i) (y[i] - x[i,1] * beta[1] - x[i,2] * beta[2])^2))
})
# measure time to execute matrix multiplication
system.time({
res <- sum((y - x %*% beta)^2)
cat(res)
})
cat(res)
# compared to loop
system.time( {
res <- sum(sapply(seq_along(y), function(i) (y[i] - x[i,1] * beta[1] - x[i,2] * beta[2])^2))
cat(res)
})
# compared to loop
system.time( {
res <- sum(sapply(seq_along(y), function(i) (y[i] - x[i,1] * beta[1] - x[i,2] * beta[2])^2))
cat(res)
})
# measure time to execute matrix multiplication
system.time({
res <- sum((y - x %*% beta)^2)
cat(res)
})
# compared to loop
system.time( {
res <- sum(sapply(seq_along(y), function(i) (y[i] - x[i,1] * beta[1] - x[i,2] * beta[2])^2))
cat(res)
})
0.905/0.01
x <- c(11,22)
y <- formula(~ x)
f <- formula(~ x)
rm(y)
f
?formula
model.matrix(f)
?model.matrix
environment(f)
model.matrix(f)
class(x)
class(x)
# x is of type nuermic, however if x were of type factor then the model matrix will look different
x <- factor(c(1,1,2,2))
model.matrix(~ x)
# x is of type nuermic, however if x were of type factor then the model matrix will look different:
x <- factor(c(1,1,2,2))
f <- formula(~ x)
model.matrix(~ x)
x <- c(1,1,2,2)
f <- formula(~ x)
model.matrix(f)
x <- c(1,1,2,2)
f <- formula(~ x)
model.matrix(f)
class(x)
x <- factor(c(1,1,2,2))
class(x)
f <- formula(~ x)
model.matrix(~ x)
# now we have a factor x with 3 levels
x <- c(1,1,2,2,3,3)
f <- formula(~ x)
model.matrix(f)
# now we have a factor x with 3 levels
x <- factor(c(1,1,2,2,3,3))
f <- formula(~ x)
model.matrix(f)
?contrasts
?contr.sum
model.matrix(f, contrasts.arg = list(x  = 'contr.sum')) #contr.sum uses 'sum to zero conrasts' thereby each rowsum equals 0
x <- factor(c(1,1,1,1,2,2,2,2))
x <- factor(c(1,1,1,1,2,2,2,2))
y <- factor(c('a', 'a', 'b', 'b', 'a', 'a', 'b', 'b'))
x + y
model.matrix(~ x + y)
?model.matrix
# or with interaction term using ':' notation
model.matrix(~ x + y + x:y) # adds an interaction variable x*y as 3rd column
# or with interaction term using ':' notation
model.matrix(~ x + y + x:y) # adds an interaction variable x*y as 3rd column
# or equivalently we can just use the asterisk symbol * to achieve the same design matrix as x + y + x*y
model.matrix((~ x*y)
# or equivalently we can just use the asterisk symbol * to achieve the same design matrix as x + y + x*y
model.matrix(~ x*y)
# or equivalently we can just use the asterisk symbol * to achieve the same design matrix as x + y + x*y
model.matrix(~ x*y)
x <- factor(c(1,1,2,2))
model.matrix(~ x)
?relevel
x
x <- relevel(x, "2")
x
x <- factor(c(1,1,2,2))
model.matrix(~ x)
model.matrix(~ x)
x <- factor(c(1,1,2,2))
model.matrix(~ x)
x <- relevel(x, "2")
model.matrix(~ x)
x
levels(x)
# now lets change to the old factor level order
x <- factor(x, levels = c("1", "2"))
z <- 1:4
model.matrix(~ z)
model.matrix(~ 0 + z)
model.matrix(~ z + I(z^2)) # if we want to include a numeric transformation of z, we have to wrap the trafo in the I() function
?formula
url <- "https://raw.githubusercontent.com/genomicsclass
/dagdata/master/inst/extdata/femaleMiceWeights.csv"
filename <- "femaleMiceWeights.csv"
library(downloader)
if (!file.exists(filename) download(url, filename))
if (!file.exists(filename)) {download(url, filename)}
getwd()
setwd("~/Desktop/ML_classes/Linear_Models_and_Matrix_Algebra_harvard/week3")
setwd("~/Desktop/ML_classes/Linear_Models_and_Matrix_Algebra_harvard/week3")
if (!file.exists(filename)) download(url, filename)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleMiceWeights.csv"
filename <- "femaleMiceWeights.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
url <- "https://raw.githubusercontent.com/genomicsclass
/dagdata/master/inst/extdata/femaleMiceWeights.csv"
filename <- "femaleMiceWeights.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
data <- read.csv(filename)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleMiceWeights.csv"
filename <- "femaleMiceWeights.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
data
dat <- read.csv(filename)
rm(data
rm(data)
?stripchart
# create 1D scatter plots (or dot plots)
# => good alternative to boxplot when sample size is small
stripchart(x = dat)
# create 1D scatter plots (or dot plots)
# => good alternative to boxplot when sample size is small
stripchart(dat$Bodyweight ~ dat$Diet)
# create 1D scatter plots (or dot plots)
# => good alternative to boxplot when sample size is small
stripchart(dat$Bodyweight ~ dat$Diet,
vertical=T)
# create 1D scatter plots (or dot plots)
# => good alternative to boxplot when sample size is small
stripchart(dat$Bodyweight ~ dat$Diet,
vertical=T, method = "jitter")
# create 1D scatter plots (or dot plots)
# => good alternative to boxplot when sample size is small
stripchart(dat$Bodyweight ~ dat$Diet,
vertical=T, method = "jitter",
main = "Bodyweight over Diet")
levels(dat$Diet)
## create linear model to analyze the difference between the 2 groups
levels(dat$Diet)
X <- model.matrix(~ Diet, data = dat)
X <- model.matrix(~ Diet, data = dat)
X <- model.matrix(~ Diet, data = dat)
X
levels(dat$Diet)
X
colnames(X)
# so let us revel to use hf as reference level
dat$Diet <- relevel(dat$Diet, ref = "hf")
# so let us revel to use hf as reference level
dat$Diet <- relevel(dat$Diet, ref = "hf")
X <- model.matrix(~ Diet, data = dat)
## create linear model to analyze the difference between the 2 groups
levels(dat$Diet) # order of the levels is taken alphabetically for the function model.matrix
X <- model.matrix(~ Diet, data = dat)
head(X)
colnames(X)
# so let us revel to use hf as reference level
dat$Diet <- relevel(dat$Diet, ref = "hf")
levels(dat$Diet)
dat <- read.csv(filename)
# create 1D scatter plots (or dot plots)
# => good alternative to boxplot when sample size is small
stripchart(dat$Bodyweight ~ dat$Diet,
vertical=T, method = "jitter",
main = "Bodyweight over Diet")
## create linear model to analyze the difference between the 2 groups
levels(dat$Diet) # order of the levels is taken alphabetically for the function model.matrix
X <- model.matrix(~ Diet, data = dat)
head(X)
colnames(X)
# so let us revel to use hf as reference level
dat$Diet <- relevel(dat$Diet, ref = "hf")
levels(dat$Diet)
X <- model.matrix(~ Diet, data = dat)
head(X)
# and reverse levels back to original order
dat$Diet <- relevel(dat$Diet, ref = "chow")
levels(dat$Diet)
class(~ amine)
setwd("~/Downloads")
df <- read.csv("steffi.csv")
df <- read.csv("steffi.csv")
head(df)
pattern1 <- paste(df[,"Agency"], sep ="|")
pattern1
pattern1 <- paste0(df[,"Agency"], sep ="|")
pattern1
pattern1 <- as.string(paste0(df[,"Agency"], sep ="|"))
pattern1 <- cat(df[,"Agency"], sep ="|")
pattern1
pattern1 <- str(df[,"Agency"])
pattern1
pattern1 <- paste0(df[,"Agency"], sep ="|", collapse = T)
pattern1 <- paste(df[,"Agency"], sep ="|", collapse = T)
pattern1 <- paste(df[,"Agency"], collapse = T)
paste0(df[,"Agency"], collapse = T)
paste0(df[,"Agency"], collapse = TRUE)
paste0(df[,"Agency"])
df[1,1]
as.string(df[1,1])
(df[1,1]
print(df[1,1])
df[1,1]
class(df[,1])
class(df[,1])
df[,1] <- lapply(df[,1], as.character)
df[,2] <- lapply(df[,2], as.character)
class(df[,1])
paste(df[,"Agency"], sep ="|")
paste(df[,"Agency"], sep ="\|")
paste(df[,"Agency"], sep ="|")
paste0(df[,"Agency"], sep ="|")
df[1,1]
paste(df[,1], collapse = '')
paste(df[,1], collapse = '|')
pattern1 <- paste(df[,"Agency"], collapse = '|')
pattern2 <- paste(df[,"Communion"], collapse = '|')
df <- read.csv("steffi.csv", )
head(df)
class(df[,1])
#df[,1] <- lapply(df[,1], as.character)
#df[,2] <- lapply(df[,2], as.character)
class(df[,1])
pattern1 <- paste(df[,"Agency"], collapse = '|')
pattern2 <- paste(df[,"Communion"], collapse = '|')
cat(pattern1)
cat(pattern2)
pattern1
setwd("~/Desktop/ML_classes/Linear_Models_and_Matrix_Algebra_harvard/week3")
fit <- lm(Bodyweight ~ Diet, data = dat)
summary(fit)
coefs <- coef(fit)
coefs
y <- dat$Bodyweight
x <- model.matrix(object = ~ Diet, data = dat)
y <- dat$Bodyweight
x <- model.matrix(object = ~ Diet, data = dat)
solve(t(x) %*% x %*% t(x) %*% y)
y <- dat$Bodyweight
x <- model.matrix(object = ~ Diet, data = dat)
beta_hat <- solve(t(x) %*% x) %*% t(x) %*% y
cat(beta_hat)
?split
s <- split(x = dat$Bodyweight, f = dat$Diet)
s
mean(s["chow"])
s["chow"]
mean(s["chow"])
s["chow"]
class(["chow"])
class(s["chow"])
names(s)
names(s)s[["chow"]]
s[["chow"]]
mean(s[["chow"]]) #double brackets needed to retrieve the numeric vector
mean(s[["hf"]])
# slope (beta1) is just the difference between average Bodyweight of high fat to control samples
mean(s[["hf"]]) - mean(s[["chow"]])
# make graph from the lecture
stripchart(dat$Bodyweight ~ dat$Diet,
vertical=T, method = "jitter",
main = "Bodyweight over Diet",
ylim = c(0,40), xlim = c(0,3))
# make graph from the lecture
stripchart(dat$Bodyweight ~ dat$Diet,
vertical=T, method = "jitter",
main = "Bodyweight over Diet",
ylim = c(0,40))
# make graph from the lecture
stripchart(dat$Bodyweight ~ dat$Diet,
vertical=T, method = "jitter",
main = "Bodyweight over Diet",
ylim = c(0,40), xlim = c(0,3))
a <- -0.25
lgth <- .1
library(RColorBrewer)
cols <- brewer.pal(3)
cols <- brewer.pal(n = 3, name = "Dark2")
cols
abline(h=0)
arrows(x0 = 1+a, y0 = 0, x1 = 1+a, y1 = coefs[1],
col = cols[1], lwd = 3)
# make graph from the lecture
stripchart(dat$Bodyweight ~ dat$Diet,
vertical=T, method = "jitter",
main = "Bodyweight over Diet",
ylim = c(0,40), xlim = c(0,3))
a <- -0.25
lgth <- .1
library(RColorBrewer)
cols <- brewer.pal(n = 3, name = "Dark2") # get 3 different colors
abline(h=0)
lgth <- .1 #length of the eges of the arrow head
library(RColorBrewer)
cols <- brewer.pal(n = 3, name = "Dark2") # get 3 different colors
abline(h=0)
arrows(x0 = 1+a, y0 = 0, x1 = 1+a, y1 = coefs[1],
col = cols[1], lwd = 3, length = lgth)
# add horizontal line at the intercept value
abline(h = coefs[1], col = cols[1])
arrows(x0 = 2+a, y0 = coefs[2], x1 = 2+a, y1 = coefs[1] + coefs[2],
col = cols[2], lwd = 3, length = lgth)
# make graph from the lecture
stripchart(dat$Bodyweight ~ dat$Diet,
vertical=T, method = "jitter",
main = "Bodyweight over Diet",
ylim = c(0,40), xlim = c(0,3))
a <- -0.25
lgth <- .1 #length of the eges of the arrow head
library(RColorBrewer)
cols <- brewer.pal(n = 3, name = "Dark2") # get 3 different colors
abline(h=0)
arrows(x0 = 1+a, y0 = 0, x1 = 1+a, y1 = coefs[1],
col = cols[1], lwd = 3, length = lgth)
# add horizontal line at the intercept value
abline(h = coefs[1], col = cols[1])
arrows(x0 = 2+a, y0 = coefs[1], x1 = 2+a, y1 = coefs[1] + coefs[2],
col = cols[2], lwd = 3, length = lgth)
# add horizontal line for the average of the hf group
abline(h = coefs[2], col = cols[2])
# make graph from the lecture
stripchart(dat$Bodyweight ~ dat$Diet,
vertical=T, method = "jitter",
main = "Bodyweight over Diet",
ylim = c(0,40), xlim = c(0,3))
a <- -0.25
lgth <- .1 #length of the eges of the arrow head
library(RColorBrewer)
cols <- brewer.pal(n = 3, name = "Dark2") # get 3 different colors
abline(h=0)
arrows(x0 = 1+a, y0 = 0, x1 = 1+a, y1 = coefs[1],
col = cols[1], lwd = 3, length = lgth)
# add horizontal line at the intercept value
abline(h = coefs[1], col = cols[1])
arrows(x0 = 2+a, y0 = coefs[1], x1 = 2+a, y1 = coefs[1] + coefs[2],
col = cols[2], lwd = 3, length = lgth)
# add horizontal line for the average of the hf group
abline(h = coefs[1] + coefs[2], col = cols[2])
cols
legend("right", names(ceofs), fill = cols, cex = 0.75, bg = "white")
legend("right", names(coefs), fill = cols, cex = 0.75, bg = "white")
# now: let's compare lm results with results from a simple 2 group t-test
summary(fit)$coefficients
ttest <- t.test(x = s["chow"], y = s["hf"], var.equal = T)
summary(fit)$coefficients[2,3]
ttest <- t.test(x = s["chow"], y = s["hf"], var.equal = T)
ttest <- t.test(x = s[["chow"]], y = s[["hf"]], var.equal = T)
summary(fit)$coefficients[2,3]
ttest$statistic
# OBSERVATION: both t-values are same despite the sign is different: -2.05 vs 2.05
# to get the same sign we just have to flip the order or arguments in ttest()
ttest <- t.test(x = s[["hf"]], y = s[["chow"]], var.equal = T)
ttest$statistic
nx <- 5
ny <- 7
X = cbind(rep(1,nx + ny)
rep(c(0,1)
c(nx, ny)))
X = cbind(rep(1,nx + ny)
rep(c(0,1)
c(nx, ny)))
X = cbind(rep(1,nx + ny), rep(c(0,1), c(nx, ny)))
N <- nx+ny
col1 <- rep(1, N)
col2 <- rep(x = c(0,1), each = c(nx, ny))
col2
nx <- 5
ny <- 7
N <- nx+ny
col1 <- rep(1, N)
col2 <- rep(x = c(0,1), each = c(nx, ny))
col2 <- rep(x = c(0,1), c(nx, ny))
col2
length(col2)
col2 <- rep(x = c(0,1), each = c(nx, ny))
col2 <- rep(x = c(0,1), each = c(nx, ny))
col2
length(col2)
nx <- 5
ny <- 7
N <- nx+ny
col1 <- rep(1, N)
col2 <- rep(x = c(0,1), time = c(nx, ny))
X <- cbind(rep(1,nx + ny), rep(c(0,1), c(nx, ny)))
head(X)
inv_X_prime_X <- solve(t(X) %*% X)
cat(inv_X_prime_X[2,2])
inv_X_prime_X
X_prime_X <- (t(X) %*% X))
X_prime_X <- {t(X) %*% X)}
X_prime_X <- t(X) %*% X)
cat(X_prime_X[2,2])
X_prime_X <- t(X) %*% X)
cat(X_prime_X[2,2])
X_prime_X <- t(X) %*% X
cat(X_prime_X[2,2])
X_prime_X <- t(X) %*% X
cat(X_prime_X[1,1])
cat(X_prime_X)
print(X_prime_X)
X
nx <- 5
ny <- 7
N <- nx+ny
col1 <- rep(1, N)
col2 <- rep(x = c(0,1), time = c(nx, ny))
X <- cbind(rep(1,nx + ny), rep(c(0,1), c(nx, ny)))
head(X)
X_prime_X <- t(X) %*% X
print(X_prime_X[1,1])
print(X_prime_X)
X
print(X_prime_X)
